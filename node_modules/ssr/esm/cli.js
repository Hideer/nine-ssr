#!/usr/bin/env node
import { resolve } from 'path';
import { fork } from 'child_process';
import * as yargs from 'yargs';
import { generateHtml } from './html';
import { cleanOutDir } from './clean';
import { transformConfig, handleEnv } from './preprocess';
const spinnerProcess = fork(resolve(__dirname, './spinner')); // 单独创建子进程跑 spinner 否则会被后续的 同步代码 block 导致 loading 暂停
const debug = require('debug')('ssr:cli');
const start = Date.now();
const spinner = {
    start: () => spinnerProcess.send({
        message: 'start'
    }),
    stop: () => spinnerProcess.send({
        message: 'stop'
    })
};
yargs
    .command('start', 'Start Server', {}, async (argv) => {
    var _a, _b, _c, _d, _e;
    spinner.start();
    await transformConfig();
    await handleEnv(argv, spinner);
    const { parseFeRoutes, loadPlugin, copyReactContext } = await import('ssr-server-utils');
    await parseFeRoutes();
    debug(`require ssr-server-utils time: ${Date.now() - start} ms`);
    const plugin = loadPlugin();
    debug(`loadPlugin time: ${Date.now() - start} ms`);
    spinner.stop();
    debug(`parseFeRoutes ending time: ${Date.now() - start} ms`);
    if (((_a = plugin.clientPlugin) === null || _a === void 0 ? void 0 : _a.name) === 'plugin-react') {
        await copyReactContext();
    }
    await ((_c = (_b = plugin.clientPlugin) === null || _b === void 0 ? void 0 : _b.start) === null || _c === void 0 ? void 0 : _c.call(_b, argv));
    debug(`clientPlugin ending time: ${Date.now() - start} ms`);
    await cleanOutDir();
    await ((_e = (_d = plugin.serverPlugin) === null || _d === void 0 ? void 0 : _d.start) === null || _e === void 0 ? void 0 : _e.call(_d, argv));
    debug(`serverPlugin ending time: ${Date.now() - start} ms`);
})
    .command('build', 'Build server and client files', {}, async (argv) => {
    var _a, _b, _c, _d, _e;
    spinner.start();
    process.env.NODE_ENV = 'production';
    await transformConfig();
    const { parseFeRoutes, loadPlugin, copyReactContext } = await import('ssr-server-utils');
    await parseFeRoutes();
    const plugin = loadPlugin();
    spinner.stop();
    if (((_a = plugin.clientPlugin) === null || _a === void 0 ? void 0 : _a.name) === 'plugin-react') {
        await copyReactContext();
    }
    await ((_c = (_b = plugin.clientPlugin) === null || _b === void 0 ? void 0 : _b.build) === null || _c === void 0 ? void 0 : _c.call(_b, argv));
    await cleanOutDir();
    await ((_e = (_d = plugin.serverPlugin) === null || _d === void 0 ? void 0 : _d.build) === null || _e === void 0 ? void 0 : _e.call(_d, argv));
    await generateHtml(argv);
})
    .command('deploy', 'Deploy function to aliyun cloud or tencent cloud', {}, async (argv) => {
    var _a, _b, _c;
    process.env.NODE_ENV = 'production';
    const { loadPlugin } = await import('ssr-server-utils');
    const plugin = loadPlugin();
    if (!((_a = plugin === null || plugin === void 0 ? void 0 : plugin.serverPlugin) === null || _a === void 0 ? void 0 : _a.deploy)) {
        console.log('当前插件不支持 deploy 功能，请使用 ssr-plugin-midway 插件 参考 https://www.yuque.com/midwayjs/faas/migrate_egg 或扫码进群了解');
        return;
    }
    process.env.NODE_ENV = 'production';
    await ((_c = (_b = plugin.serverPlugin) === null || _b === void 0 ? void 0 : _b.deploy) === null || _c === void 0 ? void 0 : _c.call(_b, argv));
    spinner.stop();
})
    .demandCommand(1, 'You need at least one command before moving on')
    .option('version', {
    alias: 'v',
    default: false
})
    .fail((msg, err) => {
    if (err) {
        console.log(err);
        spinner.stop();
        process.exit(1);
    }
    console.log(msg);
})
    .parse();
