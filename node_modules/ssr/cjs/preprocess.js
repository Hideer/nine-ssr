"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformConfig = exports.handleEnv = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const esbuild_1 = require("esbuild");
const shelljs_1 = require("shelljs");
const handleEnv = async (argv, spinner) => {
    process.env.BUILD_TOOL = argv.vite ? 'vite' : 'webpack';
    process.env.NODE_ENV = 'development';
    const { copyViteConfig, checkVite, loadConfig } = await Promise.resolve().then(() => require('ssr-server-utils'));
    const { https } = loadConfig();
    if (https) {
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
    }
    if (process.env.BUILD_TOOL === 'vite') {
        const result = await checkVite();
        if (!result) {
            spinner.stop();
            process.exit(1);
        }
        await copyViteConfig();
    }
};
exports.handleEnv = handleEnv;
const transformConfig = async () => {
    const { accessFile, getCwd } = await Promise.resolve().then(() => require('ssr-server-utils'));
    const cwd = getCwd();
    if (!await accessFile((0, path_1.join)(cwd, './build'))) {
        (0, shelljs_1.mkdir)((0, path_1.join)(cwd, './build'));
    }
    if (await accessFile((0, path_1.join)(cwd, './config.js'))) {
        (0, shelljs_1.cp)('-r', `${(0, path_1.join)(cwd, './config.js')}`, `${(0, path_1.join)(cwd, './build/config.js')}`);
    }
    const configWithTs = await accessFile((0, path_1.join)(cwd, './config.ts'));
    if (configWithTs) {
        const fileContent = (await fs_1.promises.readFile((0, path_1.join)(cwd, './config.ts'))).toString();
        const { code } = await (0, esbuild_1.transform)(fileContent, {
            loader: 'ts',
            format: 'cjs'
        });
        await fs_1.promises.writeFile((0, path_1.join)(cwd, './build/config.js'), code);
    }
};
exports.transformConfig = transformConfig;
