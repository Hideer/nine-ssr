"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseRuntimeEngine = void 0;
const runtime_1 = require("./runtime");
const util_1 = require("./util");
const performance_1 = require("./lib/performance");
class BaseRuntimeEngine {
    constructor() {
        this.runtimeExtensions = [];
        this.contextExtensions = [];
        this.eventExtensions = [];
        this.healthExtensions = [];
    }
    add(extensionHandler) {
        extensionHandler(this);
    }
    addBaseRuntime(baseRuntime) {
        this.baseRuntime = baseRuntime;
    }
    addRuntimeExtension(ext) {
        //
        // This is for compatibility legacy layers
        // And this logic will be removed soon
        //
        const legacyExt = ext;
        if (legacyExt.beforeStart) {
            ext.beforeRuntimeStart = legacyExt.beforeStart;
        }
        if (legacyExt.beforeReady) {
            ext.afterFunctionStart = legacyExt.beforeReady;
        }
        this.runtimeExtensions.push(ext);
        return this;
    }
    addHealthExtension(healthExtensionHandler) {
        this.healthExtensions.push(healthExtensionHandler);
        return this;
    }
    addEventExtension(eventExtensionHandler) {
        this.eventExtensions.push(eventExtensionHandler);
        return this;
    }
    addContextExtension(contextExtensionHandler) {
        this.contextExtensions.push(contextExtensionHandler);
        return this;
    }
    async ready() {
        if (!this.baseRuntime) {
            this.addBaseRuntime(new runtime_1.ServerlessBaseRuntime());
        }
        this.runtime = util_1.completeAssign.apply(this, [this.baseRuntime].concat(this.runtimeExtensions));
        await this.getCurrentRuntime().init(this.contextExtensions);
        performance_1.default.mark('midway-faas:runtimeStart:start');
        await this.getCurrentRuntime().runtimeStart(this.eventExtensions);
        performance_1.default.mark('midway-faas:runtimeStart:end');
        performance_1.default.mark('midway-faas:functionStart:start');
        await this.getCurrentRuntime().functionStart();
        performance_1.default.mark('midway-faas:functionStart:end');
        this.measureMarksOnReady();
    }
    async close() {
        await this.runtime.close();
    }
    getCurrentRuntime() {
        return this.runtime;
    }
    measureMarksOnReady() {
        [
            'runtimeStart',
            'beforeRuntimeStartHandler',
            'afterRuntimeStartHandler',
            'functionStart',
            'beforeFunctionStartHandler',
            'afterFunctionStartHandler',
        ].forEach(it => {
            performance_1.default.measure(`midway-faas:${it}:measure`, `midway-faas:${it}:start`, `midway-faas:${it}:end`);
        });
        // Disable midway performance marks.
        performance_1.default.disable();
    }
}
exports.BaseRuntimeEngine = BaseRuntimeEngine;
//# sourceMappingURL=engine.js.map