/// <reference types="node" />
import { EventEmitter } from 'events';
import { ContextExtensionHandler, EventExtensionHandler, IServerlessLogger, LoggerFactory, PropertyParser, Runtime, FunctionEvent, BootstrapOptions } from './interface';
import { DebugLogger } from './lib/debug';
import { BaseLoggerFactory } from './lib/loggerFactory';
export declare class ServerlessBaseRuntime extends EventEmitter implements Runtime {
    propertyParser: PropertyParser<string>;
    debugLogger: DebugLogger;
    loggerFactory: LoggerFactory;
    contextExtensions: ContextExtensionHandler[];
    eventHandlers: FunctionEvent[];
    handlerStore: Map<any, any>;
    logger: any;
    protected options: BootstrapOptions;
    constructor();
    init(contextExtensions: any): void;
    runtimeStart(eventExtensions: EventExtensionHandler[]): Promise<void>;
    functionStart(): Promise<void>;
    getContext(event: FunctionEvent, newArgs: any): Promise<any>;
    emitHandler(funEvent: FunctionEvent, args: any): Promise<any>;
    close(): Promise<void>;
    createEnvParser(): PropertyParser<string>;
    createLogger(options?: any): IServerlessLogger;
    createLoggerFactory(): BaseLoggerFactory;
    invokeInitHandler(...args: any[]): Promise<unknown>;
    invokeDataHandler(...args: any[]): Promise<any>;
    triggerRoute(payload: any): Promise<FunctionEvent>;
    invoke(payload: any): Promise<any>;
    defaultInvokeHandler(...args: any[]): Promise<void>;
    createFunctionContext(event: FunctionEvent, ...args: any[]): any;
    getProperty(propertyKey: string): any;
    getPropertyParser(): PropertyParser<string>;
    getContextExtensions(): ContextExtensionHandler[];
    protected handlerInvokerWrapper(handlerKey: string, args?: any): Promise<void>;
    setOptions(options: any): void;
    get isAppMode(): boolean;
    getRuntimeConfig(): any;
    /**
     * get function name in runtime
     */
    getFunctionName(): string;
    /**
     * get function service/group in runtime
     */
    getFunctionServiceName(): string;
}
//# sourceMappingURL=runtime.d.ts.map