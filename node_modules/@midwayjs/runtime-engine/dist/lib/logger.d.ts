import { Logger } from 'egg-logger';
import { IServerlessLogger } from '../interface';
export declare class ServerlessLogger extends Logger implements IServerlessLogger {
    options: any;
    handler: any;
    private waiting;
    constructor(options: any);
    write(...args: [string, ...any[]]): void;
    get defaults(): {
        file: any;
        encoding: string;
        level: string;
        consoleLevel: string;
        buffer: boolean;
    };
    protected startLogRotateBySize(): Promise<void>;
    /**
     * Produce a delay on an optimistic lock, optimistic lock can broke this delay
     * @param ms
     * @return {Promise<any>}
     */
    protected delayOnOptimisticLock(ms: any): Promise<any>;
    /**
     * A cycle to find out which log file needs to cut
     * @return {Promise<void>}
     */
    protected rotateLogBySize(): Promise<void>;
    protected checkAndRotate(transport: any): Promise<void>;
    /**
     * Cut log file by size
     * @param {RotationStrategy} strategy
     * @return {Promise<void>}
     */
    protected rotateBySize(): Promise<void>;
    /**
     * If file exist, try backup. If backup filed, remove it.
     * This operation for the file size cutting only.
     * @param targetPath
     * @param backupPath
     * @return {Promise<void>}
     */
    protected renameOrDelete(targetPath: any, backupPath: any): Promise<void>;
    close(): void;
}
//# sourceMappingURL=logger.d.ts.map