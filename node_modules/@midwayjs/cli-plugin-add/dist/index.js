"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddPlugin = void 0;
const command_core_1 = require("@midwayjs/command-core");
const enquirer = require("enquirer");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const chalk = require("chalk");
const child_process_1 = require("child_process");
const categorySelect_1 = require("./categorySelect");
const light_generator_1 = require("light-generator");
const light_spinner_1 = require("light-spinner");
const templateList = require('@midwayjs/boilerplate-list');
class AddPlugin extends command_core_1.BasePlugin {
    constructor() {
        super(...arguments);
        this.projectName = '';
        this.projectDirPath = '';
        this.template = '';
        this.commands = {
            new: {
                // mw new xxx -t
                lifecycleEvents: [
                    'formatCommand',
                    'generator',
                    'installDep',
                    'printUsage',
                ],
                options: {
                    template: {
                        usage: 'new template',
                        alias: 't',
                    },
                    target: {
                        usage: 'new project target directory',
                    },
                    type: {
                        usage: 'new project type',
                    },
                    npm: {
                        usage: 'npm registry',
                    },
                },
                passingCommand: true,
            },
        };
        this.hooks = {
            'new:formatCommand': this.newFormatCommand.bind(this),
            'new:generator': this.generator.bind(this),
            'new:installDep': this.installDep.bind(this),
            'new:printUsage': this.printUsage.bind(this),
        };
    }
    async newFormatCommand() {
        var _a;
        this.template = this.options.template;
        if (this.options.type) {
            this.template = (_a = templateList[this.options.type]) === null || _a === void 0 ? void 0 : _a.package;
        }
        if (!this.template) {
            this.template = await this.userSelectTemplate();
        }
        if (!this.options.npm) {
            this.options.npm = command_core_1.findNpm().cmd;
        }
        const { commands } = this.core.coreOptions;
        let projectPath = this.options.target || commands[1];
        if (!projectPath) {
            projectPath = await new enquirer.Input({
                message: 'What name would you like to use for the new project?',
                initial: 'midway-project',
            }).run();
        }
        this.projectName = projectPath;
        const { cwd } = this.core;
        this.core.debug('cwd', cwd);
        const projectDirPath = path_1.join(cwd, projectPath);
        if (fs_extra_1.existsSync(projectDirPath)) {
            const isOverwritten = await new enquirer.Confirm({
                name: 'question',
                message: `The name '${projectPath}' already exists, is it overwritten?`,
                initial: true,
            }).run();
            if (!isOverwritten) {
                process.exit();
            }
            await fs_extra_1.remove(projectDirPath);
        }
        this.projectDirPath = projectDirPath;
    }
    async generator() {
        const { projectDirPath, template } = this;
        if (!template) {
            return;
        }
        let type = 'npm';
        if (template[0] === '.' || template[0] === '/') {
            type = 'local';
        }
        this.core.debug('template', template);
        this.core.debug('projectDirPath', projectDirPath);
        this.core.debug('type', type);
        const spin = new light_spinner_1.default({
            text: 'Downloading Boilerplate...',
        });
        spin.start();
        try {
            const lightGenerator = new light_generator_1.LightGenerator();
            let generator;
            if (type === 'npm') {
                // 利用 npm 包
                generator = lightGenerator.defineNpmPackage({
                    npmClient: this.options.npm || 'npm',
                    npmPackage: template,
                    targetPath: projectDirPath,
                });
            }
            else {
                // 利用本地路径
                generator = lightGenerator.defineLocalPath({
                    templatePath: template,
                    targetPath: projectDirPath,
                });
            }
            await generator.run();
            spin.stop();
        }
        catch (e) {
            spin.stop();
            throw e;
        }
    }
    // 用户选择模板
    async userSelectTemplate() {
        const prompt = new categorySelect_1.CategorySelect({
            name: 'templateName',
            message: 'Hello, traveller.\n  Which template do you like?',
            groupChoices: templateList,
            result: value => {
                return value.split(' - ')[0];
            },
            show: true,
        });
        const type = await prompt.run();
        return templateList[type].package;
    }
    async installDep() {
        await this.npmInstall(this.projectDirPath);
    }
    // 安装npm到构建文件夹
    async npmInstall(baseDir) {
        return new Promise((resolve, reject) => {
            const installDirectory = baseDir;
            const pkgJson = path_1.join(installDirectory, 'package.json');
            if (!fs_extra_1.existsSync(pkgJson)) {
                return resolve(void 0);
            }
            const pkg = fs_extra_1.readJSONSync(pkgJson);
            const allDeps = Object.keys(Object.assign({}, pkg.devDependencies, pkg.dependencies));
            const spin = new light_spinner_1.default({
                text: 'Dependencies installing...',
            });
            spin.start();
            this.checkDepInstalled(baseDir, spin, allDeps);
            child_process_1.exec(`${this.options.npm || 'npm'} install --legacy-peer-deps`, { cwd: installDirectory }, err => {
                if (err) {
                    const errmsg = (err && err.message) || err;
                    this.core.cli.log(` - npm install err ${errmsg}`);
                    clearTimeout(this.checkDepInstallTimeout);
                    spin.stop();
                    reject(errmsg);
                }
                else {
                    clearTimeout(this.checkDepInstallTimeout);
                    spin.stop();
                    resolve(true);
                }
            });
        });
    }
    checkDepInstalled(baseDir, spin, allDeps) {
        const nmDir = path_1.join(baseDir, 'node_modules');
        const notFind = allDeps.filter(dep => {
            return !fs_extra_1.existsSync(path_1.join(nmDir, dep));
        });
        if (!notFind.length) {
            return;
        }
        spin.text = `[${allDeps.length - notFind.length}/${allDeps.length}] Dependencies installing...`;
        clearTimeout(this.checkDepInstallTimeout);
        this.checkDepInstallTimeout = setTimeout(() => {
            this.checkDepInstalled(baseDir, spin, allDeps);
        }, 200);
    }
    printUsage() {
        console.log('Successfully created project', chalk.hex('#3eab34')(this.projectName));
        console.log('Get started with the following commands:');
        console.log('');
        console.log(chalk.hex('#777777')(`$ cd ${path_1.relative(this.core.cwd, this.projectDirPath)}`));
        console.log(chalk.hex('#777777')('$ npm run dev'));
        console.log('');
        console.log('');
        console.log(chalk.hex('#3eab34')('Thanks for using Midway'));
        console.log('');
        console.log('Document ❤ Star:', chalk.hex('#1C95E2')('https://github.com/midwayjs/midway'));
        console.log('');
    }
}
exports.AddPlugin = AddPlugin;
//# sourceMappingURL=index.js.map