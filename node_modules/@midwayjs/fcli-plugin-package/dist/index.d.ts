import { BasePlugin } from '@midwayjs/command-core';
import { AnalyzeResult } from '@midwayjs/locate';
export declare class PackagePlugin extends BasePlugin {
    options: any;
    midwayVersion: string;
    servicePath: any;
    midwayBuildPath: string;
    defaultTmpFaaSOut: string;
    codeAnalyzeResult: AnalyzeResult;
    integrationDistTempDirectory: string;
    zipCodeDefaultName: string;
    private compilerHost;
    private program;
    commands: {
        package: {
            usage: string;
            lifecycleEvents: string[];
            options: {
                npm: {
                    usage: string;
                };
                buildDir: {
                    usage: string;
                };
                sourceDir: {
                    usage: string;
                };
                sharedDir: {
                    usage: string;
                };
                sharedTargetDir: {
                    usage: string;
                };
                skipZip: {
                    usage: string;
                    shortcut: string;
                };
                skipBuild: {
                    usage: string;
                };
                resolve: {
                    usage: string;
                    shortcut: string;
                };
                tsConfig: {
                    usage: string;
                };
                function: {
                    usage: string;
                    shortcut: string;
                };
            };
        };
    };
    hooks: {
        'package:cleanup': any;
        'package:installDevDep': any;
        'package:locate': any;
        'before:package:copyFile': any;
        'package:copyFile': any;
        'package:compile': any;
        'package:preload': any;
        'package:installLayer': any;
        'package:installDep': any;
        'package:checkAggregation': any;
        'package:selectFunction': any;
        'package:package': any;
        'before:package:generateSpec': any;
        'after:package:generateEntry': any;
        'before:package:finalize': any;
        'package:emit': any;
        'package:copyStaticFile': any;
        'package:analysisCode': any;
        'package:bundle': any;
    };
    cleanup(): Promise<void>;
    installDevDep(): Promise<void>;
    locate(): Promise<void>;
    copyFile(): Promise<void>;
    installLayer(): Promise<void>;
    getLayerNpmList(): any[];
    installDep(): Promise<void>;
    getTsCodeRoot(): string;
    private biggestDep;
    compile(): Promise<any>;
    private getCwd;
    emit(): Promise<void>;
    preload(): Promise<void>;
    analysisCode(): Promise<void>;
    private outputTsErrorMessage;
    private copyStaticFile;
    defaultGenerateEntry(): Promise<void>;
    selectFunction(): Promise<void>;
    package(): Promise<void>;
    private makeZip;
    private npmInstall;
    private transformToRelative;
    private transformToAbsolute;
    checkAggregation(): Promise<void>;
    getAggregationFunName(aggregationName: string): string;
    deployTypeBeforeCopyFile(): void;
    defaultBeforeGenerateSpec(): void;
    bundle(): Promise<void>;
    finalize(): void;
}
//# sourceMappingURL=index.d.ts.map