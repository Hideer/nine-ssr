"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FaaSPlugin = void 0;
const command_core_1 = require("@midwayjs/command-core");
const serverless_spec_builder_1 = require("@midwayjs/serverless-spec-builder");
const plugins_1 = require("./plugins");
class FaaSPlugin extends command_core_1.BasePlugin {
    async asyncInit() {
        var _a, _b, _c, _d, _e, _f;
        const { cwd } = this.core;
        const specFileInfo = serverless_spec_builder_1.getSpecFile(cwd);
        if (!((_b = (_a = this.core.service) === null || _a === void 0 ? void 0 : _a.provider) === null || _b === void 0 ? void 0 : _b.name)) {
            const spec = serverless_spec_builder_1.loadSpec(cwd, specFileInfo);
            // 挂载service
            this.core.service = spec;
        }
        if (!this.core.config) {
            this.core.config = {};
        }
        this.core.coreOptions.provider = (_d = (_c = this.core.service) === null || _c === void 0 ? void 0 : _c.provider) === null || _d === void 0 ? void 0 : _d.name;
        if (!this.core.config.servicePath) {
            this.core.config.servicePath = cwd;
        }
        if (!this.core.config.specFile) {
            this.core.config.specFile = specFileInfo;
        }
        // 加载faas的插件
        let needLoad = plugins_1.PluginList;
        const { options, commands } = this.core.coreOptions;
        const command = commands === null || commands === void 0 ? void 0 : commands[0];
        needLoad = command_core_1.filterPluginByCommand(plugins_1.PluginList, {
            command,
            cwd: this.core.cwd,
            // 当没有 command 或者 仅执行 help 的时候，不加载平台私有插件
            platform: !(options === null || options === void 0 ? void 0 : options.h) && command
                ? (_f = (_e = this.core.service) === null || _e === void 0 ? void 0 : _e.provider) === null || _f === void 0 ? void 0 : _f.name
                : 'unplatform',
        });
        this.core.debug('FaaS Plugin load list', command, needLoad);
        const allPluginClass = await command_core_1.getPluginClass(needLoad, {
            cwd: this.core.cwd,
            load: name => {
                try {
                    return require(name);
                }
                catch (e) {
                    this.core.debug('Load FaaS Plugin Error', e);
                    throw e;
                }
            },
            npm: options.npm,
            notAutoInstall: options === null || options === void 0 ? void 0 : options.h,
        });
        allPluginClass.forEach(pluginClass => {
            this.core.addPlugin(pluginClass);
        });
        if (!this.core.service.plugins) {
            return;
        }
        this.core.debug('FaaS Plugin load Spec Plugin', this.core.service.plugins);
        for (const plugin of this.core.service.plugins) {
            if (/^npm:/.test(plugin) || /^local:/.test(plugin)) {
                this.core.addPlugin(plugin);
            }
            else if (/^\./.test(plugin)) {
                this.core.addPlugin(`local:${this.core.coreOptions.provider || ''}:${plugin}`);
            }
        }
    }
}
exports.FaaSPlugin = FaaSPlugin;
//# sourceMappingURL=index.js.map