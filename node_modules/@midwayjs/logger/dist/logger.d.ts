import { Logger } from 'winston';
import { DelegateLoggerOptions, LoggerLevel, LoggerOptions, IMidwayLogger, LoggerCustomInfoHandler } from './interface';
export declare function isPlainObject(value: any): boolean;
declare type NewLogger = Omit<Logger, 'log' | 'add' | 'close' | 'remove' | 'write' | 'info' | 'warn' | 'debug' | 'error' | 'verbose' | 'silly'>;
export declare const EmptyLogger: (new (options?: LoggerOptions) => IMidwayLogger & NewLogger & {
    log(...args: any[]): any;
}) & NewLogger;
/**
 *  base logger with console transport and file transport
 */
export declare class MidwayBaseLogger extends EmptyLogger implements IMidwayLogger {
    consoleTransport: any;
    fileTransport: any;
    errTransport: any;
    loggerOptions: LoggerOptions;
    defaultLabel: string;
    defaultMetadata: {};
    customInfoHandler: LoggerCustomInfoHandler;
    constructor(options?: LoggerOptions);
    log(level: any, ...args: any[]): any;
    disableConsole(): void;
    enableConsole(): void;
    disableFile(): void;
    enableFile(): void;
    disableError(): void;
    enableError(): void;
    isEnableFile(): boolean;
    isEnableConsole(): boolean;
    isEnableError(): boolean;
    getConsoleLevel(): LoggerLevel;
    getFileLevel(): LoggerLevel;
    updateLevel(level: LoggerLevel): void;
    updateFileLevel(level: LoggerLevel): void;
    updateConsoleLevel(level: LoggerLevel): void;
    updateDefaultLabel(defaultLabel: string): void;
    updateDefaultMeta(defaultMetadata: Record<string, unknown>): void;
    updateTransformableInfo(customInfoHandler: LoggerCustomInfoHandler): void;
    getDefaultLoggerConfigure(): {
        format: import("logform").Format;
    };
    getDefaultLabel(): string;
    getDefaultMeta(): Record<string, unknown>;
    write(...args: any[]): any;
    add(transport: any): any;
    remove(transport: any): any;
    close(): any;
    debug(...args: any[]): void;
    info(...args: any[]): void;
    warn(...args: any[]): void;
    error(...args: any[]): void;
    verbose(...args: any[]): void;
    silly(...args: any[]): void;
}
/**
 * framework delegate logger, it can proxy logger output to another logger
 */
export declare class MidwayDelegateLogger extends MidwayBaseLogger {
    constructor(options: DelegateLoggerOptions);
}
export {};
//# sourceMappingURL=logger.d.ts.map