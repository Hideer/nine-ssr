"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MidwayDelegateLogger = exports.MidwayBaseLogger = exports.EmptyLogger = exports.isPlainObject = void 0;
const winston_1 = require("winston");
const rotate_1 = require("./rotate");
const transport_1 = require("./transport");
const format_1 = require("./format");
const os = require("os");
const path_1 = require("path");
const util = require("util");
const constant_1 = require("./constant");
const isWindows = os.platform() === 'win32';
function isPlainObject(value) {
    if (Object.prototype.toString.call(value) !== '[object Object]') {
        return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return prototype === null || prototype === Object.prototype;
}
exports.isPlainObject = isPlainObject;
exports.EmptyLogger = (0, winston_1.createLogger)().constructor;
const midwayLogLevels = {
    none: 0,
    error: 1,
    warn: 2,
    info: 3,
    verbose: 4,
    debug: 5,
    silly: 6,
    all: 7,
};
/**
 *  base logger with console transport and file transport
 */
class MidwayBaseLogger extends exports.EmptyLogger {
    constructor(options = {}) {
        super(Object.assign(options, {
            levels: midwayLogLevels,
        }));
        this.defaultLabel = '';
        this.defaultMetadata = {};
        this.customInfoHandler = info => {
            return info;
        };
        this.exitOnError = false;
        if (isWindows) {
            options.disableErrorSymlink = true;
            options.disableFileSymlink = true;
        }
        this.loggerOptions = options;
        if (this.loggerOptions.defaultLabel) {
            this.defaultLabel = this.loggerOptions.defaultLabel;
        }
        if (this.loggerOptions.defaultMeta) {
            this.defaultMetadata = this.loggerOptions.defaultMeta;
        }
        if (this.loggerOptions.format) {
            this.configure({
                format: this.loggerOptions.format,
            });
        }
        else {
            this.configure(this.getDefaultLoggerConfigure());
        }
        this.configure(Object.assign({}, this.getDefaultLoggerConfigure(), {
            format: this.loggerOptions.format,
        }));
        this.consoleTransport = new winston_1.transports.Console({
            level: options.consoleLevel || options.level || 'silly',
            format: winston_1.format.combine(process.env.MIDWAY_LOGGER_DISABLE_COLORS !== 'true'
                ? winston_1.format.colorize({
                    all: true,
                    colors: {
                        none: 'reset',
                        error: 'red',
                        warn: 'yellow',
                        info: 'reset',
                        verbose: 'reset',
                        debug: 'blue',
                        silly: 'reset',
                        all: 'reset',
                    },
                })
                : (0, winston_1.format)(i => i)()),
        });
        if (options.disableConsole !== true) {
            this.enableConsole();
        }
        options.dir = options.dir || process.cwd();
        options.fileLogName = options.fileLogName || 'midway-core.log';
        if ((0, path_1.isAbsolute)(options.fileLogName)) {
            options.dir = (0, path_1.dirname)(options.fileLogName);
            options.fileLogName = (0, path_1.basename)(options.fileLogName);
        }
        options.errorLogName = options.errorLogName || 'common-error.log';
        if ((0, path_1.isAbsolute)(options.errorLogName)) {
            options.errorDir = (0, path_1.dirname)(options.errorLogName);
            options.errorLogName = (0, path_1.basename)(options.errorLogName);
        }
        if (options.disableFile !== true) {
            this.enableFile();
        }
        if (options.disableError !== true) {
            this.enableError();
        }
        this.add(new transport_1.EmptyTransport());
    }
    log(level, ...args) {
        const originArgs = [...args];
        let meta, msg;
        if (args.length > 1 && isPlainObject(args[args.length - 1])) {
            meta = args.pop();
        }
        else {
            meta = {};
        }
        const last = args.pop();
        if (last instanceof Error) {
            msg = util.format(...args, last);
            meta[constant_1.ORIGIN_ERROR] = last;
        }
        else {
            msg = util.format(...args, last);
        }
        meta[constant_1.ORIGIN_ARGS] = originArgs;
        return super.log(level, msg, meta);
    }
    disableConsole() {
        this.remove(this.consoleTransport);
    }
    enableConsole() {
        this.add(this.consoleTransport);
    }
    disableFile() {
        this.remove(this.fileTransport);
    }
    enableFile() {
        if (!this.fileTransport) {
            this.fileTransport = new rotate_1.DailyRotateFileTransport({
                dirname: this.loggerOptions.dir,
                filename: this.loggerOptions.fileLogName,
                datePattern: this.loggerOptions.fileDatePattern || 'YYYY-MM-DD',
                level: this.loggerOptions.fileLevel || this.loggerOptions.level || 'silly',
                createSymlink: this.loggerOptions.disableFileSymlink !== true,
                symlinkName: this.loggerOptions.fileLogName,
                maxSize: this.loggerOptions.fileMaxSize || '200m',
                maxFiles: this.loggerOptions.fileMaxFiles || '31d',
                eol: this.loggerOptions.eol || os.EOL,
                zippedArchive: this.loggerOptions.fileZippedArchive,
            });
        }
        this.add(this.fileTransport);
    }
    disableError() {
        this.remove(this.errTransport);
    }
    enableError() {
        if (!this.errTransport) {
            this.errTransport = new rotate_1.DailyRotateFileTransport({
                dirname: this.loggerOptions.errorDir || this.loggerOptions.dir,
                filename: this.loggerOptions.errorLogName,
                datePattern: this.loggerOptions.errDatePattern || 'YYYY-MM-DD',
                level: 'error',
                createSymlink: this.loggerOptions.disableErrorSymlink !== true,
                symlinkName: this.loggerOptions.errorLogName,
                maxSize: this.loggerOptions.errMaxSize || '200m',
                maxFiles: this.loggerOptions.errMaxFiles || '31d',
                eol: this.loggerOptions.eol || os.EOL,
                zippedArchive: this.loggerOptions.errZippedArchive,
            });
        }
        this.add(this.errTransport);
    }
    isEnableFile() {
        return !!this.fileTransport;
    }
    isEnableConsole() {
        return !!this.consoleTransport;
    }
    isEnableError() {
        return !!this.errTransport;
    }
    getConsoleLevel() {
        return this.consoleTransport.level;
    }
    getFileLevel() {
        return this.fileTransport.level;
    }
    updateLevel(level) {
        this.level = level;
        this.consoleTransport.level = level;
        this.fileTransport.level = level;
    }
    updateFileLevel(level) {
        this.fileTransport.level = level;
    }
    updateConsoleLevel(level) {
        this.consoleTransport.level = level;
    }
    updateDefaultLabel(defaultLabel) {
        this.defaultLabel = defaultLabel;
    }
    updateDefaultMeta(defaultMetadata) {
        this.defaultMetadata = defaultMetadata;
    }
    updateTransformableInfo(customInfoHandler) {
        this.customInfoHandler = customInfoHandler;
    }
    getDefaultLoggerConfigure() {
        const printInfo = this.loggerOptions.printFormat
            ? this.loggerOptions.printFormat
            : (info) => {
                return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.labelText}${info.message}`;
            };
        return {
            format: winston_1.format.combine((0, format_1.displayCommonMessage)({
                target: this,
            }), (0, format_1.displayLabels)(), winston_1.format.timestamp({
                format: 'YYYY-MM-DD HH:mm:ss,SSS',
            }), winston_1.format.splat(), winston_1.format.printf(info => {
                if (info.ignoreFormat) {
                    return info.message;
                }
                const newInfo = this.customInfoHandler(info);
                return printInfo(newInfo || info);
            })),
        };
    }
    getDefaultLabel() {
        return this.defaultLabel;
    }
    getDefaultMeta() {
        return this.defaultMetadata;
    }
    write(...args) {
        if ((args.length === 1 && typeof args[0] !== 'object') ||
            !args[0]['level']) {
            // 这里必须要用 none
            return super.log.apply(this, ['none', ...args, { ignoreFormat: true }]);
        }
        else {
            return super.write.apply(this, args);
        }
    }
    add(transport) {
        return super.add(transport);
    }
    remove(transport) {
        return super.remove(transport);
    }
    close() {
        return super.close();
    }
    debug(...args) {
        this.log('debug', ...args);
    }
    info(...args) {
        this.log('info', ...args);
    }
    warn(...args) {
        this.log('warn', ...args);
    }
    error(...args) {
        this.log('error', ...args);
    }
    verbose(...args) {
        this.log('verbose', ...args);
    }
    silly(...args) {
        this.log('silly', ...args);
    }
}
exports.MidwayBaseLogger = MidwayBaseLogger;
/**
 * framework delegate logger, it can proxy logger output to another logger
 */
class MidwayDelegateLogger extends MidwayBaseLogger {
    constructor(options) {
        super({
            disableConsole: true,
            disableFile: true,
            disableError: true,
        });
        this.add(new transport_1.DelegateTransport({
            delegateLogger: options.delegateLogger,
        }));
    }
}
exports.MidwayDelegateLogger = MidwayDelegateLogger;
//# sourceMappingURL=logger.js.map