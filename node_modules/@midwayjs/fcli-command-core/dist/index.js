"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCLI = exports.CommandHookCore = exports.writeToSpec = exports.loadSpec = exports.getSpecFile = void 0;
const command_core_1 = require("@midwayjs/command-core");
const serverless_spec_builder_1 = require("@midwayjs/serverless-spec-builder");
__exportStar(require("@midwayjs/command-core"), exports);
var serverless_spec_builder_2 = require("@midwayjs/serverless-spec-builder");
Object.defineProperty(exports, "getSpecFile", { enumerable: true, get: function () { return serverless_spec_builder_2.getSpecFile; } });
Object.defineProperty(exports, "loadSpec", { enumerable: true, get: function () { return serverless_spec_builder_2.loadSpec; } });
Object.defineProperty(exports, "writeToSpec", { enumerable: true, get: function () { return serverless_spec_builder_2.writeToSpec; } });
class CommandHookCore extends command_core_1.CommandCore {
}
exports.CommandHookCore = CommandHookCore;
class BaseCLI extends command_core_1.CoreBaseCLI {
    initCore() {
        this.loadSpec();
        this.providerName = (this.spec.provider && this.spec.provider.name) || '';
        this.core = new command_core_1.CommandCore({
            config: {
                servicePath: this.cwd,
                specFile: this.specFile,
            },
            commands: this.commands,
            service: this.spec,
            provider: this.providerName,
            options: this.argv,
            log: this.loadLog(),
            displayUsage: this.displayUsage.bind(this),
            extensions: this.loadExtensions(),
            ...this.coverCoreOptions(),
        });
    }
    async loadPlugins() {
        await super.loadPlugins();
        await this.loadUserPlugin();
    }
    loadSpec() {
        this.specFile = serverless_spec_builder_1.getSpecFile(this.cwd);
        this.spec = serverless_spec_builder_1.loadSpec(this.cwd, this.specFile);
    }
    loadUserPlugin() {
        if (!this.spec || !this.spec.plugins) {
            return;
        }
        for (const plugin of this.spec.plugins) {
            if (/^npm:/.test(plugin) || /^local:/.test(plugin)) {
                this.core.addPlugin(plugin);
            }
            else if (/^\./.test(plugin)) {
                this.core.addPlugin(`local:${this.providerName}:${plugin}`);
            }
        }
    }
}
exports.BaseCLI = BaseCLI;
//# sourceMappingURL=index.js.map