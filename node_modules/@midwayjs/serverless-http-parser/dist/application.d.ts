/// <reference types="node" />
import { EventEmitter } from 'events';
export declare class Application extends EventEmitter {
    proxy: boolean;
    subdomainOffset: number;
    proxyIpHeader: string;
    maxIpsCount: number;
    middleware: any[];
    keys: any;
    context: any;
    request: any;
    response: any;
    constructor(options?: any);
    /**
     * Initialize a new context.
     */
    createContext(req: any, res: any): any;
    /**
     * Use the given middleware `fn`.
     *
     * Old-style middleware will be converted.
     *
     * @param {Function} fn
     * @return {Application} self
     * @api public
     */
    use(fn: (...args: any[]) => Promise<void>): this;
    /**
     * Return a request handler callback
     * for node's native http server.
     *
     * @return {Function}
     * @api public
     */
    callback(): (req: any, res: any, respond: any) => any;
    /**
     * Return JSON representation.
     * We only bother showing settings.
     *
     * @return {Object}
     * @api public
     */
    toJSON(): any;
    /**
     * Inspect implementation.
     *
     * @return {Object}
     * @api public
     */
    inspect(): any;
    /**
     * Default error handler.
     *
     * @param {Error} err
     * @api private
     */
    onerror(err: any): void;
}
//# sourceMappingURL=application.d.ts.map