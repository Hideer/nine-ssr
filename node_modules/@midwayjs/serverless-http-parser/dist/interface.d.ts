/// <reference types="node" />
export interface FCAPIGatewayEvent {
    path: string;
    httpMethod: string;
    headers: object;
    queryParameters: object;
    pathParameters: object;
    body: string;
    isBase64Encoded: 'true' | 'false' | boolean;
}
export interface FCHTTPEvent {
    domain: string;
    method: string;
    clientIP: string;
    url: string;
    path: string;
    queries: object;
    headers: object;
    body: string | Buffer;
}
export interface SCFAPIGatewayEvent {
    /**
     * 请求来源的 API 网关的配置信息、请求标识、认证信息、来源信息。其中：
     * serviceId，path，httpMethod 指向 API 网关的服务Id、API 的路径和方法；
     * stage 指向请求来源 API 所在的环境；
     * requestId 标识当前这次请求的唯一 ID；
     * identity 标识用户的认证方法和认证的信息；
     * sourceIp 标识请求来源 IP
     */
    requestContext: {
        serviceId: string;
        path: string;
        httpMethod: string;
        requestId: string;
        identity: {
            secretId?: string;
        };
        sourceIp: string;
        stage: string;
    };
    headers: {
        [key: string]: string;
    };
    body?: string;
    queryStringParameters: {
        [key: string]: string;
    };
    pathParameters: {
        [key: string]: string;
    };
    headerParameters: {
        [key: string]: string;
    };
    stageVariables: {
        stage: string;
    };
    path: string;
    queryString: {
        [key: string]: string;
    };
    httpMethod: string;
}
export interface SCFContext {
    callbackWaitsForEmptyEventLoop: boolean;
    memory_limit_in_mb: number;
    time_limit_in_ms: number;
    request_id: string;
    environ: string;
    function_version: string;
    function_name: string;
    namespace: string;
}
export declare type GatewayEvent = FCAPIGatewayEvent & SCFAPIGatewayEvent & FCHTTPEvent;
//# sourceMappingURL=interface.d.ts.map