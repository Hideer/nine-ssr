import { FaaSOriginContext } from '@midwayjs/faas-typings';
export declare const context: {
    app: any;
    req: any;
    res: any;
    request: any;
    response: any;
    /**
     * faas origin context object
     */
    readonly originEvent: any;
    readonly originContext: FaaSOriginContext;
    readonly headers: any;
    readonly header: any;
    readonly method: any;
    path: any;
    readonly query: any;
    readonly ip: any;
    readonly url: any;
    readonly params: any;
    readonly host: any;
    readonly hostname: any;
    get(field: any): any;
    type: any;
    body: any;
    status: any;
    set(key: any, value?: any): void;
    etag: any;
    lastModified: any;
    length: any;
    readonly accept: any;
    readonly logger: any;
    is(type: any, ...types: any[]): any;
    append(field: string, val: string | string[]): void;
    remove(field: string): void;
    accepts(...args: any[]): any;
    acceptsEncodings(...args: any[]): any;
    acceptsCharsets(...args: any[]): any;
    acceptsLanguages(...args: any[]): any;
    /**
     * Throw an error with `status` (default 500) and
     * `msg`. Note that these are user-level
     * errors, and the message may be exposed to the client.
     *
     *    this.throw(403)
     *    this.throw(400, 'name required')
     *    this.throw('something exploded')
     *    this.throw(new Error('invalid'))
     *    this.throw(400, new Error('invalid'))
     *
     * See: https://github.com/jshttp/http-errors
     *
     * Note: `status` should only be passed as the first parameter.
     *
     * @param {String|Number|Error} err, msg or status
     * @param {String|Number|Error} [err, msg or status]
     * @param {Object} [props]
     * @api public
     */
    throw(...args: any[]): never;
    onerror(err: any): void;
    redirect(url: string, alt?: string): any;
    /**
     * Vary on `field`.
     *
     * @param {String} field
     * @api public
     */
    vary(field: any): any;
    /**
     * util.inspect() implementation, which
     * just returns the JSON output.
     *
     * @return {Object}
     * @api public
     */
    inspect(): any;
    toJSON(): {
        request: any;
        response: any;
        app: any;
        req: string;
        res: string;
        socket: string;
    };
    cookies: any;
};
//# sourceMappingURL=context.d.ts.map