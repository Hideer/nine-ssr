import { FaaSOriginContext } from '@midwayjs/faas-typings';
export declare const request: {
    _accept: any;
    req: any;
    readonly host: string;
    /**
     * Parse the "Host" header field hostname
     *
     * @return {String} hostname
     * @api public
     */
    readonly hostname: any;
    accepts(...args: any[]): any;
    readonly accept: any;
    /**
     * Return accepted encodings or best fit based on `encodings`.
     *
     * Given `Accept-Encoding: gzip, deflate`
     * an array sorted by quality is returned:
     *
     *     ['gzip', 'deflate']
     *
     * @param {String|Array} encoding(s)...
     * @return {String|Array}
     * @api public
     */
    acceptsEncodings(...args: any[]): any;
    /**
     * Return accepted charsets or best fit based on `charsets`.
     *
     * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
     * an array sorted by quality is returned:
     *
     *     ['utf-8', 'utf-7', 'iso-8859-1']
     *
     * @param {String|Array} charset(s)...
     * @return {String|Array}
     * @api public
     */
    acceptsCharsets(...args: any[]): any;
    /**
     * Return accepted languages or best fit based on `langs`.
     *
     * Given `Accept-Language: en;q=0.8, es, pt`
     * an array sorted by quality is returned:
     *
     *     ['es', 'pt', 'en']
     *
     * @param {String|Array} lang(s)...
     * @return {Array|String}
     * @api public
     */
    acceptsLanguages(...args: any[]): any;
    /**
     * faas origin context object
     */
    readonly originEvent: any;
    readonly originContext: FaaSOriginContext;
    readonly ip: any;
    readonly url: any;
    path: any;
    readonly method: any;
    readonly headers: any;
    readonly header: any;
    readonly query: any;
    readonly body: any;
    readonly params: any;
    is(type: any, ...types: any[]): any;
    /**
     * Return request header.
     *
     * The `Referrer` header field is special-cased,
     * both `Referrer` and `Referer` are interchangeable.
     *
     * Examples:
     *
     *     this.get('Content-Type');
     *     // => "text/plain"
     *
     *     this.get('content-type');
     *     // => "text/plain"
     *
     *     this.get('Something');
     *     // => ''
     *
     * @param {String} field
     * @return {String}
     * @api public
     */
    get(field: any): any;
    /**
     * Inspect implementation.
     *
     * @return {Object}
     * @api public
     */
    inspect(): any;
    /**
     * Return JSON representation.
     *
     * @return {Object}
     * @api public
     */
    toJSON(): any;
    readonly protocol: any;
    /**
     * Short-hand for:
     *
     *    this.protocol == 'https'
     *
     * @return {Boolean}
     * @api public
     */
    readonly secure: boolean;
};
//# sourceMappingURL=request.d.ts.map