"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBootstrap = exports.createLightApp = exports.createFunctionApp = exports.close = exports.createApp = exports.create = void 0;
const bootstrap_1 = require("@midwayjs/bootstrap");
const core_1 = require("@midwayjs/core");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const decorator_1 = require("@midwayjs/decorator");
const logger_1 = require("@midwayjs/logger");
const os = require("os");
process.setMaxListeners(0);
function isTestEnvironment() {
    const testEnv = ['test', 'unittest'];
    return (testEnv.includes(process.env.MIDWAY_SERVER_ENV) ||
        testEnv.includes(process.env.EGG_SERVER_ENV) ||
        testEnv.includes(process.env.NODE_ENV));
}
function isWin32() {
    return os.platform() === 'win32';
}
function findFirstExistModule(moduleList) {
    for (const name of moduleList) {
        if (!name)
            continue;
        try {
            require.resolve(name);
            return name;
        }
        catch (e) {
            // ignore
        }
    }
}
const appMap = new WeakMap();
const bootstrapAppSet = (global['MIDWAY_BOOTSTRAP_APP_SET'] = new Set());
function getIncludeFramework(dependencies) {
    const currentFramework = [
        '@midwayjs/web',
        '@midwayjs/koa',
        '@midwayjs/express',
        '@midwayjs/serverless-app',
        '@midwayjs/grpc',
        '@midwayjs/rabbitmq',
        '@midwayjs/socketio',
        '@midwayjs/faas',
    ];
    for (const frameworkName of currentFramework) {
        if (dependencies[frameworkName]) {
            return frameworkName;
        }
    }
}
function formatPath(baseDir, p) {
    if ((0, path_1.isAbsolute)(p)) {
        return p;
    }
    else {
        return (0, path_1.resolve)(baseDir, p);
    }
}
let lastAppDir;
async function create(appDir = process.cwd(), options, customFrameworkName) {
    process.env.MIDWAY_TS_MODE = 'true';
    // 处理测试的 fixtures
    if (!(0, path_1.isAbsolute)(appDir)) {
        appDir = (0, path_1.join)(process.cwd(), 'test', 'fixtures', appDir);
    }
    if (lastAppDir && lastAppDir !== appDir) {
        // 当目录不同才清理缓存，相同目录的装饰器只加载一次，清理了就没了
        (0, decorator_1.clearAllModule)();
    }
    lastAppDir = appDir;
    global['MIDWAY_BOOTSTRAP_APP_SET'].clear();
    (0, core_1.clearContainerCache)();
    (0, logger_1.clearAllLoggers)();
    options = options || {};
    if (options.baseDir) {
        (0, core_1.safeRequire)((0, path_1.join)(`${options.baseDir}`, 'interface'));
    }
    else {
        (0, core_1.safeRequire)((0, path_1.join)(`${appDir}`, 'src/interface'));
    }
    if (options.entryFile) {
        // start from entry file, like bootstrap.js
        options.entryFile = formatPath(appDir, options.entryFile);
        global['MIDWAY_BOOTSTRAP_APP_READY'] = false;
        // set app in @midwayjs/bootstrap
        require(options.entryFile);
        await new Promise((resolve, reject) => {
            const timeoutHandler = setTimeout(() => {
                clearInterval(internalHandler);
                reject(new Error('[midway]: bootstrap timeout'));
            }, options.bootstrapTimeout || 30 * 1000);
            const internalHandler = setInterval(() => {
                if (global['MIDWAY_BOOTSTRAP_APP_READY'] === true) {
                    clearInterval(internalHandler);
                    clearTimeout(timeoutHandler);
                    resolve();
                }
            }, 200);
        });
        // 这里为了兼容下 cli 的老逻辑
        if (bootstrapAppSet.size) {
            const obj = bootstrapAppSet.values().next().value;
            return obj.framework;
        }
        return;
    }
    let framework = null;
    let DefaultFramework;
    // find framework
    if (customFrameworkName) {
        if (typeof customFrameworkName === 'string') {
            DefaultFramework = require(customFrameworkName).Framework;
        }
        else {
            DefaultFramework = customFrameworkName;
        }
    }
    else {
        // find default framework from pkg
        const pkg = require((0, path_1.join)(appDir, 'package.json'));
        if (pkg.dependencies || pkg.devDependencies) {
            customFrameworkName = getIncludeFramework(Object.assign({}, pkg.dependencies || {}, pkg.devDependencies || {}));
        }
        DefaultFramework = require(customFrameworkName).Framework;
    }
    options = options !== null && options !== void 0 ? options : {};
    // got options from framework
    if (DefaultFramework) {
        framework = new DefaultFramework();
        if (framework.getFrameworkType() === core_1.MidwayFrameworkType.WEB) {
            // add egg-mock plugin for @midwayjs/web test, provide mock method
            options = Object.assign(options || {}, {
                plugins: {
                    'egg-mock': {
                        enable: true,
                        package: 'egg-mock',
                    },
                    'midway-mock': {
                        enable: true,
                        package: '@midwayjs/mock',
                    },
                    watcher: false,
                    development: false,
                },
            });
        }
        framework.configure(options);
    }
    else {
        throw new Error('framework not found');
    }
    const starter = new bootstrap_1.BootstrapStarter();
    starter
        .configure({
        appDir,
        baseDir: options.baseDir,
    })
        .load(framework);
    await starter.init();
    await starter.run();
    appMap.set(framework.getApplication(), starter);
    return framework;
}
exports.create = create;
async function createApp(baseDir = process.cwd(), options, customFrameworkName) {
    const framework = await create(baseDir, options, customFrameworkName);
    return framework.getApplication();
}
exports.createApp = createApp;
async function close(app, options) {
    if (!app)
        return;
    options = options || {};
    let newApp;
    if (app.getApplication) {
        newApp = app.getApplication();
    }
    else {
        newApp = app;
    }
    const starter = appMap.get(newApp);
    if (starter) {
        await starter.stop();
        appMap.delete(newApp);
        bootstrapAppSet.clear();
    }
    if (isTestEnvironment()) {
        // clean first
        if (options.cleanLogsDir && !isWin32()) {
            await (0, fs_extra_1.remove)((0, path_1.join)(newApp.getAppDir(), 'logs'));
        }
        if (core_1.MidwayFrameworkType.WEB === newApp.getFrameworkType()) {
            if (options.cleanTempDir && !isWin32()) {
                await (0, fs_extra_1.remove)((0, path_1.join)(newApp.getAppDir(), 'run'));
            }
        }
        if (options.sleep > 0) {
            await (0, decorator_1.sleep)(options.sleep);
        }
        else {
            await (0, decorator_1.sleep)(50);
        }
    }
}
exports.close = close;
async function createFunctionApp(baseDir = process.cwd(), options, customFrameworkName) {
    const customFramework = customFrameworkName !== null && customFrameworkName !== void 0 ? customFrameworkName : findFirstExistModule([
        process.env.MIDWAY_SERVERLESS_APP_NAME,
        '@ali/serverless-app',
        '@midwayjs/serverless-app',
    ]);
    const framework = await create(baseDir, options, customFramework);
    return framework.getApplication();
}
exports.createFunctionApp = createFunctionApp;
async function createLightApp(baseDir = process.cwd(), options) {
    return await createApp(baseDir, options, core_1.LightFramework);
}
exports.createLightApp = createLightApp;
class BootstrapAppStarter {
    getApp(type) {
        const appMap = bootstrap_1.Bootstrap.starter.getBootstrapAppMap();
        return appMap.get(type);
    }
    async close(options = {}) {
        await bootstrap_1.Bootstrap.stop();
        if (options.sleep > 0) {
            await (0, decorator_1.sleep)(options.sleep);
        }
        else {
            await (0, decorator_1.sleep)(50);
        }
    }
}
async function createBootstrap(entryFile) {
    await create(undefined, {
        entryFile,
    });
    return new BootstrapAppStarter();
}
exports.createBootstrap = createBootstrap;
//# sourceMappingURL=utils.js.map