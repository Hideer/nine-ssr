import { IMidwayApplication, IMidwayFramework, MidwayFrameworkType } from '@midwayjs/core';
export declare type MockAppConfigurationOptions = {
    cleanLogsDir?: boolean;
    cleanTempDir?: boolean;
    entryFile?: string;
    baseDir?: string;
    bootstrapTimeout?: number;
};
export declare function create<T extends IMidwayFramework<any, U>, U = T['configurationOptions']>(appDir?: string, options?: U & MockAppConfigurationOptions, customFrameworkName?: string | MidwayFrameworkType | any): Promise<T>;
export declare function createApp<T extends IMidwayFramework<any, U>, U = T['configurationOptions'], Y = ReturnType<T['getApplication']>>(baseDir?: string, options?: U & MockAppConfigurationOptions, customFrameworkName?: string | MidwayFrameworkType | any): Promise<Y>;
export declare function close(app: IMidwayApplication | IMidwayFramework<any, any>, options?: {
    cleanLogsDir?: boolean;
    cleanTempDir?: boolean;
    sleep?: number;
}): Promise<void>;
export declare function createFunctionApp<T extends IMidwayFramework<any, U>, U = T['configurationOptions'], Y = ReturnType<T['getApplication']>>(baseDir?: string, options?: U & MockAppConfigurationOptions, customFrameworkName?: string | MidwayFrameworkType | any): Promise<Y>;
export declare function createLightApp(baseDir?: string, options?: MockAppConfigurationOptions): Promise<IMidwayApplication>;
declare class BootstrapAppStarter {
    getApp(type: MidwayFrameworkType): IMidwayApplication<any>;
    close(options?: {
        sleep?: number;
    }): Promise<void>;
}
export declare function createBootstrap(entryFile: string): Promise<BootstrapAppStarter>;
export {};
//# sourceMappingURL=utils.d.ts.map