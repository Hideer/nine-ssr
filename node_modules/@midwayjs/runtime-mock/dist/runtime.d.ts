import { FunctionEvent, Runtime } from '@midwayjs/runtime-engine';
import { Trigger } from './trigger';
export declare function sleep(sec?: number): Promise<unknown>;
export interface MockRuntimeOptions {
    layers?: any[];
    functionDir?: string;
    bootstrap?: any;
    events?: FunctionEvent[];
    handler?: any;
    initHandler?: any;
    initContext?: any;
    runtime?: Runtime;
}
export declare class MockRuntime {
    options: any;
    runtime: Runtime;
    layers: any;
    bootstrap: any;
    engine: any;
    handler: any;
    trigger: Trigger;
    initHandler: any;
    constructor(options?: MockRuntimeOptions);
    start(): Promise<Runtime>;
    invoke(...args: any[]): Promise<any>;
    delegate(trigger: Trigger): Promise<any>;
    private invokeHandlerMethod;
    close(): Promise<void>;
}
export declare const createRuntime: (options?: MockRuntimeOptions) => MockRuntime;
//# sourceMappingURL=runtime.d.ts.map