"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AliyunFCPlugin = void 0;
const command_core_1 = require("@midwayjs/command-core");
const AliyunDeploy = require("@alicloud/fun/lib/commands/deploy");
const AliyunConfig = require("@alicloud/fun/lib/commands/config");
const core_1 = require("@serverless-devs/core");
const path_1 = require("path");
const os_1 = require("os");
const fs_extra_1 = require("fs-extra");
const serverless_spec_builder_1 = require("@midwayjs/serverless-spec-builder");
const fc_1 = require("@midwayjs/serverless-spec-builder/fc");
class AliyunFCPlugin extends command_core_1.BasePlugin {
    constructor() {
        super(...arguments);
        this.provider = 'aliyun';
        this.servicePath = this.core.config.servicePath;
        this.midwayBuildPath = (0, path_1.join)(this.servicePath, '.serverless');
        this.hooks = {
            'package:generateSpec': async () => {
                this.core.cli.log('Generate spec file...');
                await (0, fc_1.generateFunctionsSpecFile)(this.getSpecJson(), (0, path_1.join)(this.midwayBuildPath, 'template.yml'));
            },
            'package:generateEntry': async () => {
                this.core.cli.log('Generate entry file...');
                this.setGlobalDependencies('@midwayjs/serverless-fc-starter');
                const preloadFile = this.getStore('preloadFile', 'global');
                (0, serverless_spec_builder_1.writeWrapper)({
                    baseDir: this.servicePath,
                    service: this.core.service,
                    distDir: this.midwayBuildPath,
                    starter: '@midwayjs/serverless-fc-starter',
                    preloadFile,
                });
            },
            'deploy:deploy': async () => {
                if (this.options.serverlessDev) {
                    return this.deployUseServerlessDev();
                }
                const profPath = (0, path_1.join)((0, os_1.homedir)(), '.fcli/config.yaml');
                const isExists = (0, fs_extra_1.existsSync)(profPath);
                if (!isExists || this.options.resetConfig) {
                    // aliyun config
                    if (process.env.SERVERLESS_DEPLOY_ID &&
                        process.env.SERVERLESS_DEPLOY_AK &&
                        process.env.SERVERLESS_DEPLOY_SECRET) {
                        // for ci
                        const profDir = (0, path_1.join)((0, os_1.homedir)(), '.fcli');
                        if (!(0, fs_extra_1.existsSync)(profDir)) {
                            (0, fs_extra_1.mkdirSync)(profDir);
                        }
                        const endPoint = process.env.SERVERLESS_DEPLOY_ENDPOINT || 'cn-hangzhou';
                        const config = [
                            `endpoint: 'https://${process.env.SERVERLESS_DEPLOY_ID}.${endPoint}.fc.aliyuncs.com'`,
                            "api_version: '2016-08-15'",
                            `access_key_id: ${process.env.SERVERLESS_DEPLOY_AK}`,
                            `access_key_secret: ${process.env.SERVERLESS_DEPLOY_SECRET}`,
                            "security_token: ''",
                            'debug: false',
                            `timeout: ${process.env.SERVERLESS_DEPLOY_TIMEOUT || 1000}`,
                            'retries: 3',
                            `sls_endpoint: ${endPoint}.log.aliyuncs.com`,
                            'report: true',
                            'enable_custom_endpoint: false',
                        ].join('\n');
                        (0, fs_extra_1.writeFileSync)(profPath, config);
                    }
                    else {
                        this.core.cli.log('please input aliyun config');
                        await AliyunConfig();
                    }
                }
                // 执行 package 打包
                await this.core.invoke(['package'], true, {
                    ...this.options,
                    skipZip: true, // 跳过压缩成zip
                });
                this.core.cli.log('Start deploy by @alicloud/fun');
                try {
                    if (!this.options.skipDeploy) {
                        await AliyunDeploy({
                            template: (0, path_1.join)(this.midwayBuildPath, 'template.yml'),
                            assumeYes: this.options.yes,
                        });
                    }
                    this.core.cli.log('Deploy success');
                }
                catch (e) {
                    this.core.cli.log(`Deploy error: ${e.message}`);
                }
            },
        };
    }
    getSpecJson() {
        const service = this.core.service;
        return {
            custom: service.custom,
            service: service.service,
            provider: service.provider,
            functions: this.core.service.functions,
            resources: service.resources,
            package: service.package,
        };
    }
    async deployUseServerlessDev() {
        const profDirPath = (0, path_1.join)((0, os_1.homedir)(), '.s');
        await (0, fs_extra_1.ensureDir)(profDirPath);
        const profPath = (0, path_1.join)(profDirPath, 'access.yaml');
        const isExists = (0, fs_extra_1.existsSync)(profPath);
        if (!isExists || this.options.resetConfig) {
            // aliyun config
            await (0, core_1.setCredential)();
        }
        // 执行 package 打包
        await this.core.invoke(['package'], true, {
            ...this.options,
            skipZip: true, // 跳过压缩成zip
        });
        this.core.cli.log('Start deploy by serverless-dev');
        const cwd = process.cwd();
        process.chdir(this.midwayBuildPath);
        let fcDeploy;
        if (!this.options.skipDeploy) {
            // https://github.com/devsapp/fc-deploy/
            fcDeploy = await (0, core_1.loadComponent)('fc-deploy');
        }
        if (!this.core.service) {
            this.core.service = {};
        }
        if (!this.core.service.provider) {
            this.core.service.provider = {};
        }
        if (typeof this.options.serverlessDev === 'object') {
            Object.assign(this.core.service.provider, this.options.serverlessDev);
        }
        const functions = (0, fc_1.generateComponentSpec)(this.core.service);
        try {
            for (const fcDeployInputs of functions) {
                Object.assign(fcDeployInputs, this.options.serverlessDev);
                delete fcDeployInputs.access;
                fcDeployInputs.path = { configPath: this.midwayBuildPath };
                fcDeployInputs.props.function.codeUri = this.midwayBuildPath;
                if (!this.options.skipDeploy) {
                    await fcDeploy.deploy(fcDeployInputs);
                }
                const funcName = fcDeployInputs.props.function.name;
                this.core.cli.log(`Function '${funcName}' deploy success`);
            }
        }
        catch (e) {
            this.core.cli.log(`Deploy error: ${e.message}`);
        }
        process.chdir(cwd);
    }
}
exports.AliyunFCPlugin = AliyunFCPlugin;
//# sourceMappingURL=index.js.map