/// <reference types="node" />
import { IMidwayBootstrapOptions, IMidwayContainer, IMidwayFramework, MidwayFrameworkType } from '@midwayjs/core';
import { Application, IServerlessAppOptions } from './interface';
import { Server } from 'net';
export declare class Framework implements IMidwayFramework<Application, IServerlessAppOptions> {
    app: Application;
    configurationOptions: IServerlessAppOptions;
    private innerApp;
    private innerFramework;
    private innerBootStarter;
    private runtime;
    private server;
    private spec;
    private proxyApp;
    protected bootstrapOptions: any;
    protected invokeFun: any;
    configure(options?: IServerlessAppOptions): this;
    stop(): Promise<void>;
    getApplicationContext(): IMidwayContainer;
    getConfiguration(key?: string): any;
    getCurrentEnvironment(): string;
    getAppDir(): string;
    getLogger(name?: string): any;
    getBaseDir(): string;
    getCoreLogger(): any;
    createLogger(name: string, options?: any): any;
    getProjectName(): string;
    getDefaultContextLoggerClass(): any;
    applicationInitialize(options: IMidwayBootstrapOptions): Promise<void>;
    getFrameworkName(): string;
    getFrameworkType(): MidwayFrameworkType;
    getApplication(): any;
    getServer(): Server;
    private getStarterName;
    private getTriggerMap;
    getServerlessInstance<T>(cls: any): Promise<T>;
    private getPlatform;
    initialize(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    protected faasInvokeMiddleware(req: any, res: any, next: any): Promise<void>;
    protected getFaaSModule(): string;
    protected getFaasStarterName(): string;
    private getFaaSSpec;
    run(): Promise<void>;
    private listenMessage;
    protected getLayers(): any[];
}
//# sourceMappingURL=framework.d.ts.map