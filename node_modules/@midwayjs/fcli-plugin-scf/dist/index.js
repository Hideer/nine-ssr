"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TencentSCFPlugin = void 0;
const command_core_1 = require("@midwayjs/command-core");
const path_1 = require("path");
const Tencent = require("serverless-tencent-scf");
const serverless_spec_builder_1 = require("@midwayjs/serverless-spec-builder");
const scf_1 = require("@midwayjs/serverless-spec-builder/scf");
class TencentSCFPlugin extends command_core_1.BasePlugin {
    constructor() {
        super(...arguments);
        this.provider = 'tencent';
        this.servicePath = this.core.config.servicePath;
        this.midwayBuildPath = (0, path_1.join)(this.servicePath, '.serverless');
        this.hooks = {
            'package:generateSpec': async () => {
                var _a, _b;
                this.core.cli.log('Generate spec file...');
                await (0, scf_1.generateFunctionsSpecFile)(this.getSpecJson({
                    provider: {
                        stage: ((_b = (_a = this.core.service) === null || _a === void 0 ? void 0 : _a.provider) === null || _b === void 0 ? void 0 : _b.stage) || 'test',
                    },
                }), (0, path_1.join)(this.midwayBuildPath, 'serverless.yml'));
            },
            'package:generateEntry': async () => {
                this.core.cli.log('Generate entry file...');
                this.setGlobalDependencies('@midwayjs/serverless-scf-starter');
                (0, serverless_spec_builder_1.writeWrapper)({
                    baseDir: this.servicePath,
                    service: this.core.service,
                    distDir: this.midwayBuildPath,
                    starter: '@midwayjs/serverless-scf-starter',
                });
            },
            'deploy:deploy': async () => {
                // 执行 package 打包
                if (!this.core.service.package) {
                    this.core.service.package = {};
                }
                if (!this.core.service.package.artifact) {
                    this.core.service.package.artifact = 'artifact.zip';
                }
                await this.core.invoke(['package'], true, this.options);
                const tencentDeploy = await this.getTencentServerless(this.core.service.package.artifact);
                if (!this.options.skipDeploy) {
                    await tencentDeploy.invoke();
                }
            },
        };
    }
    getSpecJson(coverOptions) {
        const service = this.core.service;
        if (coverOptions) {
            Object.keys(coverOptions).forEach((key) => {
                Object.assign(service[key], coverOptions[key]);
            });
        }
        return {
            custom: service.custom,
            service: service.service,
            provider: service.provider,
            functions: this.core.service.functions,
            resources: service.resources,
            package: service.package,
        };
    }
    async getTencentServerless(artifact) {
        var _a, _b;
        Object.assign(this.core.service, {
            package: {},
            runtimeExtensions: {},
        }, await (0, scf_1.generateFunctionsSpec)(this.getSpecJson({
            provider: {
                stage: ((_b = (_a = this.core.service) === null || _a === void 0 ? void 0 : _a.provider) === null || _b === void 0 ? void 0 : _b.stage) || 'test',
            },
        })));
        const midwayServerless = new command_core_1.CommandCore({
            config: {
                servicePath: this.servicePath,
            },
            commands: ['deploy'],
            service: {
                ...this.core.service,
                plugins: [],
                getAllFunctions: () => {
                    return Object.keys(this.core.service.functions);
                },
                getFunction: functionName => {
                    return this.core.service.functions[functionName];
                },
                package: {
                    artifact,
                },
            },
            provider: this.provider,
            options: {
                package: `.serverless/${this.core.service.package.artifact}`,
            },
        });
        midwayServerless.cliCommands = ['deploy'];
        midwayServerless.addPlugin(class DeployPlugin extends command_core_1.BasePlugin {
            constructor() {
                super(...arguments);
                this.commands = {
                    deploy: { lifecycleEvents: ['deploy'] },
                };
            }
        });
        midwayServerless.addPlugin(Tencent);
        await midwayServerless.ready();
        return midwayServerless;
    }
}
exports.TencentSCFPlugin = TencentSCFPlugin;
//# sourceMappingURL=index.js.map