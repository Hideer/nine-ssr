"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectoryCopyWalker = void 0;
const path = __importStar(require("path"));
const fse = __importStar(require("fs-extra"));
const walkDirSync_1 = require("./walkDirSync");
const interface_1 = require("../interface");
const debug = require('util').debuglog('generator');
class DirectoryCopyWalker {
    constructor(options = {}) {
        this.rules = options.rules || [];
        this.eventCenter = options.eventCenter;
    }
    addCopyRule(rule) {
        this.rules.push(rule);
    }
    async copy(srcDir, destDir, options = {
        replaceParameter: {},
        templateConfig: {},
    }) {
        const fullFilesPaths = walkDirSync_1.walkDirSync(srcDir, options);
        const filenameMapping = new Map();
        // add custom rule
        if (options.templateConfig.rule && options.templateConfig.rule.length) {
            for (const rule of options.templateConfig.rule) {
                try {
                    const copyRule = path.isAbsolute(rule)
                        ? require(rule)
                        : require(path.join(options.packageRoot, rule));
                    this.addCopyRule(copyRule);
                }
                catch (err) {
                    throw new Error(`load custom rule error, path = ${rule}`);
                }
            }
        }
        for (const fullFilePath of fullFilesPaths) {
            const relativeFilePath = path.relative(srcDir, fullFilePath);
            const targetFilePath = path.join(destDir, relativeFilePath);
            await fse.copy(fullFilePath, path.join(destDir, relativeFilePath));
            this.eventCenter.emit(interface_1.GeneratorEventEnum.onFileCreate, {
                sourceFullFilePath: fullFilePath,
                targetFullFilePath: path.join(destDir, relativeFilePath),
                destDir,
                relativeFilePath,
            });
            debug(`-> ${relativeFilePath}`);
            for (const rule of this.rules) {
                await rule(targetFilePath, {
                    templateDir: srcDir,
                    targetDir: destDir,
                    replaceParameter: options.replaceParameter,
                    targetRelativeFile: relativeFilePath,
                    templateConfig: options.templateConfig || {
                        root: destDir,
                        replaceFile: [],
                        replaceParameter: {},
                        rule: [],
                    },
                    filenameMapping,
                });
            }
        }
    }
}
exports.DirectoryCopyWalker = DirectoryCopyWalker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weURpckNvbnRlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvY29weURpckNvbnRlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBNkI7QUFDN0IsOENBQWdDO0FBQ2hDLCtDQUE0QztBQUM1Qyw0Q0FLc0I7QUFFdEIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUVwRCxNQUFhLG1CQUFtQjtJQUk5QixZQUNFLFVBR0ksRUFBRTtRQUVOLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBYztRQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FDUixNQUFNLEVBQ04sT0FBTyxFQUNQLFVBSUk7UUFDRixnQkFBZ0IsRUFBRSxFQUFFO1FBQ3BCLGNBQWMsRUFBRSxFQUFFO0tBQ25CO1FBRUQsTUFBTSxjQUFjLEdBQUcseUJBQVcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUVsQyxrQkFBa0I7UUFDbEIsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDckUsS0FBSyxNQUFNLElBQUksSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRTtnQkFDOUMsSUFBSTtvQkFDRixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQzt3QkFDcEMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7d0JBQ2YsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDNUI7Z0JBQUMsT0FBTyxHQUFHLEVBQUU7b0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsSUFBSSxFQUFFLENBQUMsQ0FBQztpQkFDM0Q7YUFDRjtTQUNGO1FBRUQsS0FBSyxNQUFNLFlBQVksSUFBSSxjQUFjLEVBQUU7WUFDekMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztZQUM3RCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzVELE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ25FLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLDhCQUFrQixDQUFDLFlBQVksRUFBRTtnQkFDckQsa0JBQWtCLEVBQUUsWUFBWTtnQkFDaEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUM7Z0JBQ3hELE9BQU87Z0JBQ1AsZ0JBQWdCO2FBQ2pCLENBQUMsQ0FBQztZQUNILEtBQUssQ0FBQyxNQUFNLGdCQUFnQixFQUFFLENBQUMsQ0FBQztZQUNoQyxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQzdCLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRTtvQkFDekIsV0FBVyxFQUFFLE1BQU07b0JBQ25CLFNBQVMsRUFBRSxPQUFPO29CQUNsQixnQkFBZ0IsRUFBRSxPQUFPLENBQUMsZ0JBQWdCO29CQUMxQyxrQkFBa0IsRUFBRSxnQkFBZ0I7b0JBQ3BDLGNBQWMsRUFBRSxPQUFPLENBQUMsY0FBYyxJQUFJO3dCQUN4QyxJQUFJLEVBQUUsT0FBTzt3QkFDYixXQUFXLEVBQUUsRUFBRTt3QkFDZixnQkFBZ0IsRUFBRSxFQUFFO3dCQUNwQixJQUFJLEVBQUUsRUFBRTtxQkFDVDtvQkFDRCxlQUFlO2lCQUNoQixDQUFDLENBQUM7YUFDSjtTQUNGO0lBQ0gsQ0FBQztDQUNGO0FBM0VELGtEQTJFQyJ9