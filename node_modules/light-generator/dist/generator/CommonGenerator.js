"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonGenerator = void 0;
const interface_1 = require("../interface");
const path_1 = require("path");
const fs_1 = require("../util/fs");
const fs_extra_1 = require("fs-extra");
const untildify_1 = __importDefault(require("untildify"));
const empty_dir_1 = __importDefault(require("empty-dir"));
class CommonGenerator {
    constructor(options) {
        this.templateUri = options.templateUri;
        this.targetPath = options.targetPath;
        this.copyWalker = options.copyWalker;
        this.templateName = options.templateName;
        this.eventCenter = options.eventCenter;
    }
    /**
     * 获取模板配置
     */
    async getTemplateConfig() {
        if (!this.templateConfig) {
            const templateRoot = this.getTemplatePath();
            const templatePkg = path_1.join(templateRoot, 'package.json');
            if (fs_1.fileExistsSync(templatePkg)) {
                try {
                    const pkg = fs_1.readFileSync(templatePkg);
                    const config = pkg['boilerplateConfig'];
                    if (config) {
                        config.replaceFile = config.replaceFile || ['README.md'];
                        if (typeof config.replaceFile === 'string') {
                            config.replaceFile = [config.replaceFile];
                        }
                        // normalize path for windows
                        config.replaceFile = config.replaceFile.map(item => {
                            return path_1.normalize(item);
                        });
                        config.replaceParameter =
                            config.replaceParameter || 'index.js';
                        config.root = path_1.join(templateRoot, config.root || 'boilerplate');
                        config.rule = config.rule || [];
                        this.templateConfig = config;
                    }
                }
                catch (err) {
                    console.log('boilerplate package.json is not custom format and skip');
                }
            }
        }
        return this.templateConfig;
    }
    /**
     * 获取参数列表
     */
    async getParameterList() {
        const templateConfig = (await this.getTemplateConfig());
        const templateRoot = this.getTemplatePath();
        if (templateConfig) {
            const parameterFile = path_1.join(templateRoot, templateConfig.replaceParameter);
            if (fs_1.fileExistsSync(parameterFile)) {
                return require(parameterFile);
            }
        }
        return {};
    }
    /**
     * 获取参数默认值
     */
    async getDefaultParameterValue() {
        const parameterList = await this.getParameterList();
        const defaultValue = {};
        for (const key in parameterList) {
            if (parameterList[key]['default']) {
                defaultValue[key] = parameterList[key]['default'];
            }
        }
        return defaultValue;
    }
    async run(replaceParameter = {}) {
        // Copying template from a local directory
        const servicePath = untildify_1.default(this.targetPath);
        if (fs_1.dirExistsSync(servicePath)) {
            const checkResult = await empty_dir_1.default(servicePath);
            if (!checkResult) {
                const errorMessage = `A folder named "${servicePath}" already exists.`;
                throw new Error(errorMessage);
            }
        }
        else {
            // create
            await fs_extra_1.ensureDir(servicePath);
        }
        let templateConfig = (await this.getTemplateConfig());
        let templateRoot = this.getTemplatePath();
        const packageRoot = templateRoot;
        if (templateConfig) {
            templateRoot = templateConfig.root;
            if (!fs_1.dirExistsSync(templateRoot)) {
                throw new Error(`Directory ${templateRoot} not exist`);
            }
        }
        else {
            templateConfig = {
                replaceParameter: 'index.js',
                root: templateRoot,
                replaceFile: ['README.md'],
                rule: [],
            };
        }
        this.eventCenter.emit(interface_1.GeneratorEventEnum.onTemplateReady);
        const defaultArgsValue = await this.getDefaultParameterValue();
        replaceParameter = Object.assign(defaultArgsValue, replaceParameter);
        if (templateConfig.beforeAll) {
            await this.runScript(packageRoot, templateConfig.beforeAll, {
                sourceRoot: packageRoot,
                templateRoot,
                targetRoot: servicePath,
                replaceParameter,
                templateConfig,
            });
        }
        await this.copyWalker.copy(templateRoot, servicePath, {
            packageRoot,
            replaceParameter,
            templateConfig,
            noLinks: true,
        });
        if (templateConfig.afterAll) {
            await this.runScript(packageRoot, templateConfig.afterAll, {
                sourceRoot: packageRoot,
                templateRoot,
                targetRoot: servicePath,
                replaceParameter,
                templateConfig,
            });
        }
    }
    async runScript(packageRoot, runString, runArgs) {
        const fn = path_1.isAbsolute(runString)
            ? require(runString)
            : require(path_1.join(packageRoot, runString));
        if (fn && typeof fn === 'function') {
            await fn(runArgs);
        }
    }
    onTemplateReady(handler) {
        this.eventCenter.on(interface_1.GeneratorEventEnum.onTemplateReady, handler);
    }
    onFileCreated(handler) {
        this.eventCenter.on(interface_1.GeneratorEventEnum.onFileCreate, handler);
    }
}
exports.CommonGenerator = CommonGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbW9uR2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dlbmVyYXRvci9Db21tb25HZW5lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNENBS3NCO0FBQ3RCLCtCQUFtRDtBQUNuRCxtQ0FBeUU7QUFDekUsdUNBQXFDO0FBQ3JDLDBEQUFrQztBQUNsQywwREFBaUM7QUFHakMsTUFBc0IsZUFBZTtJQVFuQyxZQUFZLE9BQStCO1FBQ3pDLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUN2QyxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDckMsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUN6QyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLGlCQUFpQjtRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN4QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDNUMsTUFBTSxXQUFXLEdBQUcsV0FBSSxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztZQUV2RCxJQUFJLG1CQUFjLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQy9CLElBQUk7b0JBQ0YsTUFBTSxHQUFHLEdBQUcsaUJBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDdEMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLG1CQUFtQixDQUEwQixDQUFDO29CQUNqRSxJQUFJLE1BQU0sRUFBRTt3QkFDVixNQUFNLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzt3QkFD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