"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NpmPatternGenerator = void 0;
const CommonGenerator_1 = require("./CommonGenerator");
const child_process_1 = require("child_process");
const path_1 = require("path");
const fse = __importStar(require("fs-extra"));
const fs_1 = require("../util/fs");
const tar = __importStar(require("tar"));
const util_1 = require("../util/");
const util_2 = require("util");
const debugLogger = util_2.debuglog('generator:npm');
class NpmPatternGenerator extends CommonGenerator_1.CommonGenerator {
    constructor(options) {
        super(options);
        this.npmClient = options.npmClient;
        this.npmInstall = !!options.npmInstall;
        this.registryUrl = options.registryUrl
            ? '--registry=' + options.registryUrl
            : '';
        this.tmpPath = util_1.getTmpDir();
        this.targetVersion = options.targetVersion;
        fse.ensureDirSync(this.tmpPath);
        debugLogger('current npm module = [%s]', this.npmClient);
    }
    async getPackage() {
        const data = child_process_1.execSync(`${this.npmClient} view ${this.templateUri} dist-tags --json ${this.registryUrl}`, {
            cwd: process.env.HOME,
        }).toString();
        const remoteVersion = JSON.parse(data)[this.targetVersion || 'latest'];
        this.pkgRootName = `${util_1.renamePackageName(this.templateUri)}-${remoteVersion}`;
        const currentPkgRoot = this.getTemplatePath();
        debugLogger('currentPkgRoot = [%s], tmpPath = [%s]', currentPkgRoot, this.tmpPath);
        // 清理失败的模板
        if (fs_1.dirExistsSync(currentPkgRoot) &&
            !fs_1.fileExistsSync(path_1.join(currentPkgRoot, '.success'))) {
            await fse.remove(currentPkgRoot);
        }
        if (!fs_1.dirExistsSync(currentPkgRoot)) {
            // clean template directory first
            if (fs_1.dirExistsSync(path_1.join(this.tmpPath, this.pkgRootName))) {
                await fse.remove(path_1.join(this.tmpPath, this.pkgRootName));
            }
            const cmd = `${this.npmClient} pack ${this.templateUri}@${remoteVersion} ${this.registryUrl}&& mkdir ${this.pkgRootName}`;
            debugLogger('download cmd = [%s]', cmd);
            // run download
            child_process_1.execSync(cmd, {
                cwd: this.tmpPath,
                stdio: ['pipe', 'ignore', 'pipe'],
            });
            await tar.x({
                file: path_1.join(this.tmpPath, `${this.pkgRootName}.tgz`),
                C: path_1.join(this.tmpPath, this.pkgRootName),
            });
            if (!fs_1.dirExistsSync(currentPkgRoot)) {
                throw new Error(`${currentPkgRoot} package download error`);
            }
            if (this.npmInstall && fse.existsSync(path_1.join(currentPkgRoot, 'package.json'))) {
                const pkg = require(path_1.join(currentPkgRoot, 'package.json'));
                if (pkg['dependencies']) {
                    debugLogger('find package.json and dependencies');
                    const installCmd = `${this.npmClient} ${this.registryUrl} install --production`;
                    child_process_1.execSync(installCmd, {
                        cwd: currentPkgRoot,
                        stdio: ['pipe', 'ignore', 'pipe'],
                    });
                    debugLogger('install dependencies complete');
                }
            }
            await fse.writeFile(path_1.join(currentPkgRoot, '.success'), 'complete');
        }
    }
    async getTemplateConfig() {
        await this.getPackage();
        return super.getTemplateConfig();
    }
    getTemplatePath() {
        return path_1.join(this.tmpPath, this.pkgRootName, 'package');
    }
}
exports.NpmPatternGenerator = NpmPatternGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTnBtUGF0dGVybkdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZW5lcmF0b3IvTnBtUGF0dGVybkdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdURBQW9EO0FBRXBELGlEQUF5QztBQUN6QywrQkFBNEI7QUFDNUIsOENBQWdDO0FBQ2hDLG1DQUEyRDtBQUMzRCx5Q0FBMkI7QUFDM0IsbUNBQXdEO0FBQ3hELCtCQUE0QztBQUM1QyxNQUFNLFdBQVcsR0FBRyxlQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFOUMsTUFBYSxtQkFBb0IsU0FBUSxpQ0FBZTtJQVF0RCxZQUFZLE9BQTRCO1FBQ3RDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNuQyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVc7WUFDcEMsQ0FBQyxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsV0FBVztZQUNyQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ1AsSUFBSSxDQUFDLE9BQU8sR0FBRyxnQkFBUyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQzNDLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hDLFdBQVcsQ0FBQywyQkFBMkIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVPLEtBQUssQ0FBQyxVQUFVO1FBQ3RCLE1BQU0sSUFBSSxHQUFHLHdCQUFRLENBQ25CLEdBQUcsSUFBSSxDQUFDLFNBQVMsU0FBUyxJQUFJLENBQUMsV0FBVyxxQkFBcUIs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