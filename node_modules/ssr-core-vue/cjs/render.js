"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = void 0;
const path_1 = require("path");
const ssr_server_utils_1 = require("ssr-server-utils");
const vue_server_renderer_1 = require("vue-server-renderer");
const cwd = (0, ssr_server_utils_1.getCwd)();
const defaultConfig = (0, ssr_server_utils_1.loadConfig)();
const { renderToStream, renderToString } = (0, vue_server_renderer_1.createRenderer)();
async function render(ctx, options) {
    var _a, _b, _c, _d;
    const config = Object.assign({}, defaultConfig, options !== null && options !== void 0 ? options : {});
    const { isDev, chunkName, stream } = config;
    const isLocal = isDev || process.env.NODE_ENV !== 'production';
    const serverFile = (0, path_1.resolve)(cwd, `./build/server/${chunkName}.server.js`);
    if (isLocal) {
        // clear cache in development environment
        delete require.cache[serverFile];
    }
    if (!ctx.response.type && typeof ctx.response.type !== 'function') {
        // midway/koa 场景设置默认 content-type
        ctx.response.type = 'text/html;charset=utf-8';
    }
    else if (!((_b = (_a = ctx.response).hasHeader) === null || _b === void 0 ? void 0 : _b.call(_a, 'content-type'))) {
        // express 场景
        (_d = (_c = ctx.response).setHeader) === null || _d === void 0 ? void 0 : _d.call(_c, 'Content-type', 'text/html;charset=utf-8');
    }
    const { serverRender } = require(serverFile);
    const serverRes = await serverRender(ctx, config);
    if (stream) {
        const stream = (0, ssr_server_utils_1.mergeStream2)(new ssr_server_utils_1.StringToStream('<!DOCTYPE html>'), renderToStream(serverRes));
        stream.on('error', (e) => {
            console.log(e);
        });
        return stream;
    }
    else {
        return `<!DOCTYPE html>${await renderToString(serverRes)}`;
    }
}
exports.render = render;
