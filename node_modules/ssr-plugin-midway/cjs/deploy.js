"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const fcli_command_core_1 = require("@midwayjs/fcli-command-core");
const fcli_plugin_package_1 = require("@midwayjs/fcli-plugin-package");
const fcli_plugin_deploy_1 = require("@midwayjs/fcli-plugin-deploy");
const fcli_plugin_fc_1 = require("@midwayjs/fcli-plugin-fc");
const fcli_plugin_scf_1 = require("@midwayjs/fcli-plugin-scf");
const ssr_server_utils_1 = require("ssr-server-utils");
const cwd = (0, ssr_server_utils_1.getCwd)();
const deploy = async (argv) => {
    if (!await (0, ssr_server_utils_1.isFaaS)()) {
        console.log('检测到当前为首次发布，根目录下缺少 f.yml 文件，自动创建默认 yml 文件模版');
        const ymlContent = await fs_1.promises.readFile((0, path_1.join)(cwd, './node_modules/ssr-plugin-midway/src/f.yml'));
        await fs_1.promises.writeFile((0, path_1.join)(cwd, './f.yml'), ymlContent);
    }
    console.log('发布过程中遇到发布失败超时/包体积过大等问题请查看文档 http://doc.ssr-fc.com/docs/features$faq#Serverless%20%E5%8F%91%E5%B8%83%E5%A4%B1%E8%B4%A5');
    try {
        if (argv.tencent) {
            await deployTencent();
        }
        else {
            await deployAliyun();
        }
    }
    catch (error) {
        console.error(error);
    }
};
exports.deploy = deploy;
const deployTencent = async () => {
    const core = new fcli_command_core_1.CommandHookCore({
        config: {
            servicePath: cwd
        },
        commands: ['deploy'],
        service: (0, fcli_command_core_1.loadSpec)(cwd),
        provider: 'tencent',
        log: console
    });
    core.addPlugin(fcli_plugin_package_1.PackagePlugin);
    core.addPlugin(fcli_plugin_deploy_1.DeployPlugin);
    core.addPlugin(fcli_plugin_scf_1.TencentSCFPlugin);
    await core.ready();
    await core.invoke(['deploy']);
};
const deployAliyun = async () => {
    const core = new fcli_command_core_1.CommandHookCore({
        config: {
            servicePath: cwd
        },
        options: {
            yes: true
        },
        commands: ['deploy'],
        service: (0, fcli_command_core_1.loadSpec)(cwd),
        provider: 'aliyun',
        log: console
    });
    core.addPlugin(fcli_plugin_package_1.PackagePlugin);
    core.addPlugin(fcli_plugin_deploy_1.DeployPlugin);
    core.addPlugin(fcli_plugin_fc_1.AliyunFCPlugin);
    await core.ready();
    await core.invoke(['deploy']);
};
