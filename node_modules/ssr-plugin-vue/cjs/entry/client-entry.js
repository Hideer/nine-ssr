"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.clientRender = void 0;
const ssr_client_utils_1 = require("ssr-client-utils");
// @ts-expect-error
const Routes = require("_build/ssr-temporary-routes");
const create_1 = require("./create");
const { FeRoutes, App, layoutFetch, PrefixRouterBase } = Routes;
let hasRender = false;
async function getAsyncCombineData(fetch, store, router) {
    let layoutFetchData = {};
    let fetchData = {};
    if (layoutFetch) {
        layoutFetchData = await layoutFetch({ store, router });
    }
    if (fetch) {
        const fetchFn = await fetch();
        fetchData = await fetchFn.default({ store, router });
    }
    return Object.assign({}, layoutFetchData !== null && layoutFetchData !== void 0 ? layoutFetchData : {}, fetchData !== null && fetchData !== void 0 ? fetchData : {});
}
const clientRender = async () => {
    var _a, _b, _c, _d;
    const store = (0, create_1.createStore)();
    const router = (0, create_1.createRouter)({
        base: (_a = window.prefix) !== null && _a !== void 0 ? _a : PrefixRouterBase
    });
    if (window.__INITIAL_DATA__) {
        store.replaceState(window.__INITIAL_DATA__);
    }
    const fetchData = (_b = window.__INITIAL_DATA__) !== null && _b !== void 0 ? _b : {};
    const app = new create_1.RealVue({
        // 根实例简单的渲染应用程序组件。
        render: h => h(App, {
            props: {
                fetchData
            }
        }),
        store,
        router
    });
    router.beforeResolve(async (to, from, next) => {
        var _a;
        // 找到要进入的组件并提前执行 fetch 函数
        if (hasRender || !window.__USE_SSR__) {
            const route = (0, ssr_client_utils_1.findRoute)(FeRoutes, to.path);
            const { fetch } = route;
            const combineAysncData = await getAsyncCombineData(fetch, store, to);
            (_a = to.matched) === null || _a === void 0 ? void 0 : _a.forEach(item => {
                var _a;
                item.props = Object.assign({}, (_a = item.props) !== null && _a !== void 0 ? _a : {}, {
                    fetchData: combineAysncData
                });
            });
        }
        hasRender = true;
        next();
    });
    router.onReady(() => {
        app.$mount('#app', !!window.__USE_SSR__); // 这里需要做判断 ssr/csr 来为 true/false
    });
    if (!window.__USE_VITE__) {
        (_d = (_c = module === null || module === void 0 ? void 0 : module.hot) === null || _c === void 0 ? void 0 : _c.accept) === null || _d === void 0 ? void 0 : _d.call(_c); // webpack 场景下的 hmr
    }
};
exports.clientRender = clientRender;
if (!window.__disableClientRender__) {
    // 如果服务端直出的时候带上该记号，则默认不进行客户端渲染，将处理逻辑交给上层
    // 可用于微前端场景下自定义什么时候进行组件渲染的逻辑调用
    clientRender();
}
