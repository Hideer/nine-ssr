"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serverRender = void 0;
const Vue = require("vue");
const ssr_server_utils_1 = require("ssr-server-utils");
const vuex_router_sync_1 = require("vuex-router-sync");
const serialize = require("serialize-javascript");
// @ts-expect-error
const Routes = require("_build/ssr-temporary-routes");
const create_1 = require("./create");
const { FeRoutes, App, layoutFetch, Layout, PrefixRouterBase } = Routes;
const serverRender = async (ctx, config) => {
    var _a, _b;
    const { cssOrder, jsOrder, dynamic, mode, customeHeadScript, customeFooterScript, chunkName, parallelFetch, disableClientRender, prefix } = config;
    const router = (0, create_1.createRouter)();
    const store = (0, create_1.createStore)();
    const base = prefix !== null && prefix !== void 0 ? prefix : PrefixRouterBase; // 以开发者实际传入的为最高优先级
    const viteMode = process.env.BUILD_TOOL === 'vite';
    (0, vuex_router_sync_1.sync)(store, router);
    let { path, url } = ctx.request;
    if (base) {
        path = (0, ssr_server_utils_1.normalizePath)(path, base);
        url = (0, ssr_server_utils_1.normalizePath)(url, base);
    }
    const routeItem = (0, ssr_server_utils_1.findRoute)(FeRoutes, path);
    if (!routeItem) {
        throw new Error(`
    查找组件失败，请确认当前 path: ${path} 对应前端组件是否存在
    若创建了新的页面文件夹，请重新执行 npm start 重启服务
    `);
    }
    let dynamicCssOrder = cssOrder;
    if (dynamic && !viteMode) {
        dynamicCssOrder = cssOrder.concat([`${routeItem.webpackChunkName}.css`]);
        dynamicCssOrder = await (0, ssr_server_utils_1.addAsyncChunk)(dynamicCssOrder, routeItem.webpackChunkName);
    }
    const manifest = viteMode ? {} : await (0, ssr_server_utils_1.getManifest)();
    const isCsr = !!(mode === 'csr' || ((_a = ctx.request.query) === null || _a === void 0 ? void 0 : _a.csr));
    let layoutFetchData = {};
    let fetchData = {};
    if (!isCsr) {
        const { fetch } = routeItem;
        const currentFetch = fetch ? (await fetch()).default : null;
        router.push(url);
        // csr 下不需要服务端获取数据
        if (parallelFetch) {
            [layoutFetchData, fetchData] = await Promise.all([
                layoutFetch ? layoutFetch({ store, router: router.currentRoute }, ctx) : Promise.resolve({}),
                currentFetch ? currentFetch({ store, router: router.currentRoute }, ctx) : Promise.resolve({})
            ]);
        }
        else {
            layoutFetchData = layoutFetch ? await layoutFetch({ store, router: router.currentRoute }, ctx) : {};
            fetchData = currentFetch ? await currentFetch({ store, router: router.currentRoute }, ctx) : {};
        }
    }
    else {
        (0, ssr_server_utils_1.logGreen)(`Current path ${path} use csr render mode`);
    }
    const combineAysncData = Object.assign({}, layoutFetchData !== null && layoutFetchData !== void 0 ? layoutFetchData : {}, fetchData !== null && fetchData !== void 0 ? fetchData : {});
    const state = Object.assign({}, (_b = store.state) !== null && _b !== void 0 ? _b : {}, combineAysncData);
    // @ts-expect-error
    const app = new Vue({
        router,
        store,
        render: function (h) {
            var _a, _b;
            const injectCss = [];
            if (viteMode) {
                injectCss.push(h('link', {
                    attrs: {
                        rel: 'stylesheet',
                        href: `/server/static/css/${chunkName}.css`
                    }
                }));
            }
            else {
                dynamicCssOrder.forEach(css => {
                    if (manifest[css]) {
                        injectCss.push(h('link', {
                            attrs: {
                                rel: 'stylesheet',
                                href: manifest[css]
                            }
                        }));
                    }
                });
            }
            const injectScript = viteMode ? [h('script', {
                    attrs: {
                        type: 'module',
                        src: '/node_modules/ssr-plugin-vue/esm/entry/client-entry.js'
                    }
                })] : jsOrder.map(js => h('script', {
                attrs: {
                    src: manifest[js]
                }
            }));
            const viteClient = h('script', {
                attrs: {
                    type: 'module',
                    src: '/@vite/client'
                }
            });
            const customeHeadScriptArr = customeHeadScript ? (_a = (Array.isArray(customeHeadScript) ? customeHeadScript : customeHeadScript(ctx))) === null || _a === void 0 ? void 0 : _a.map(item => h('script', Object.assign({}, item.describe, {
                domProps: {
                    innerHTML: item.content
                }
            }))) : [];
            if (disableClientRender) {
                customeHeadScriptArr.push(h('script', {
                    domProps: {
                        innerHTML: 'window.__disableClientRender__ = true'
                    }
                }));
            }
            const customeFooterScriptArr = customeFooterScript ? (_b = (Array.isArray(customeFooterScript) ? customeFooterScript : customeFooterScript(ctx))) === null || _b === void 0 ? void 0 : _b.map(item => h('script', Object.assign({}, item.describe, {
                domProps: {
                    innerHTML: item.content
                }
            }))) : [];
            return h(Layout, {
                props: { ctx, config, asyncData: combineAysncData, fetchData: layoutFetchData }
            }, [
                h('template', {
                    slot: 'remInitial'
                }, [
                    h('script', {}, [
                        "var w = document.documentElement.clientWidth / 3.75;document.getElementsByTagName('html')[0].style['font-size'] = w + 'px'"
                    ])
                ]),
                viteMode && h('template', {
                    slot: 'viteClient'
                }, [viteClient]),
                h('template', {
                    slot: 'customeHeadScript'
                }, customeHeadScriptArr),
                h('template', {
                    slot: 'customeFooterScript'
                }, customeFooterScriptArr),
                h('template', {
                    slot: 'children'
                }, [
                    h(App, {
                        props: { ctx, config, fetchData: combineAysncData }
                    })
                ]),
                h('template', {
                    slot: 'initialData'
                }, [
                    isCsr ? h('script', {
                        domProps: {
                            innerHTML: `window.__USE_VITE__=${viteMode}`
                        }
                    }) : h('script', {
                        domProps: {
                            innerHTML: `window.__USE_SSR__=true; window.__INITIAL_DATA__ =${serialize(state)};window.__USE_VITE__=${viteMode}`
                        }
                    })
                ]),
                h('template', {
                    slot: 'cssInject'
                }, injectCss),
                h('template', {
                    slot: 'jsInject'
                }, injectScript)
            ]);
        }
    });
    return app;
};
exports.serverRender = serverRender;
