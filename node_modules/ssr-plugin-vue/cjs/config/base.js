"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBaseConfig = void 0;
const path_1 = require("path");
const ssr_server_utils_1 = require("ssr-server-utils");
const webpack = require("webpack");
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const WebpackBar = require('webpackbar');
const loadModule = require.resolve;
const addBabelLoader = (chain, envOptions) => {
    chain.use('babel-loader')
        .loader(loadModule('babel-loader'))
        .options({
        cacheDirectory: true,
        cacheCompression: false,
        sourceType: 'unambiguous',
        presets: [
            [
                loadModule('@babel/preset-typescript'),
                {
                    isTSX: true,
                    allExtensions: true
                }
            ],
            [
                loadModule('@babel/preset-env'),
                envOptions
            ]
        ],
        plugins: [
            [
                loadModule('@babel/plugin-transform-runtime'), {
                    corejs: false
                }
            ],
            [
                loadModule('babel-plugin-import'),
                {
                    libraryName: 'vant',
                    libraryDirectory: 'lib',
                    style: true
                }, 'vant'
            ],
            [
                loadModule('babel-plugin-import'),
                {
                    libraryName: 'ant-design-vue',
                    libraryDirectory: 'lib',
                    style: true
                }, 'ant-design-vue'
            ]
        ]
    })
        .end();
};
const getBaseConfig = (chain, isServer) => {
    const config = (0, ssr_server_utils_1.loadConfig)();
    const { moduleFileExtensions, useHash, isDev, chainBaseConfig, corejs, ssrVueLoaderOptions, csrVueLoaderOptions, babelExtraModule } = config;
    let vueLoaderOptions = {
        babelParserPlugins: ['jsx', 'classProperties', 'decorators-legacy']
    };
    if (isServer && ssrVueLoaderOptions) {
        vueLoaderOptions = {
            vueLoaderOptions,
            ...ssrVueLoaderOptions
        };
    }
    if (!isServer && csrVueLoaderOptions) {
        vueLoaderOptions = {
            vueLoaderOptions,
            ...csrVueLoaderOptions
        };
    }
    const mode = process.env.NODE_ENV;
    const envOptions = {
        modules: false
    };
    if (corejs) {
        Object.assign(envOptions, {
            corejs: {
                version: 3,
                proposals: true
            },
            useBuiltIns: 'usage'
        });
    }
    chain.mode(mode);
    chain.module.strictExportPresence(true);
    chain
        .resolve
        .modules
        .add('node_modules')
        .add((0, path_1.join)((0, ssr_server_utils_1.getCwd)(), './node_modules'))
        .when(isDev, chain => {
        chain.add((0, ssr_server_utils_1.getLocalNodeModules)());
    })
        .end()
        .extensions.merge(moduleFileExtensions)
        .end();
    chain.resolve.alias
        .set('@', (0, ssr_server_utils_1.getFeDir)())
        .set('_build', (0, path_1.join)((0, ssr_server_utils_1.getCwd)(), './build'))
        .set('vue$', 'vue/dist/vue.runtime.esm.js')
        .end();
    (0, ssr_server_utils_1.addImageChain)(chain, isServer);
    chain.module
        .rule('vue')
        .test(/\.vue$/)
        .use('vue-loader')
        .loader(loadModule('vue-loader'))
        .options(vueLoaderOptions)
        .end();
    chain
        .plugin('vue-loader')
        .use(require('vue-loader/lib/plugin'))
        .end();
    const babelModule = chain.module
        .rule('compileBabel')
        .test(/\.(js|mjs|jsx|ts|tsx)$/)
        .exclude
        .add(/node_modules|core-js/)
        .end();
    const module = chain.module
        .rule('compileBabelForExtraModule')
        .test(/\.(js|mjs|jsx|ts|tsx)$/)
        .include
        .add([/ssr-plugin-vue/, /ssr-client-utils/]);
    let babelForExtraModule;
    if (babelExtraModule) {
        babelForExtraModule = module.add(babelExtraModule).end();
    }
    else {
        babelForExtraModule = module.end();
    }
    addBabelLoader(babelModule, envOptions);
    addBabelLoader(babelForExtraModule, envOptions);
    (0, ssr_server_utils_1.setStyle)(chain, /\.css$/, {
        rule: 'css',
        importLoaders: 1,
        isServer
    }); // 设置css
    (0, ssr_server_utils_1.setStyle)(chain, /\.less$/, {
        rule: 'less',
        loader: 'less-loader',
        importLoaders: 2,
        isServer
    });
    chain.module
        .rule('fonts')
        .test(/\.(eot|woff|woff2|ttf)(\?.*)?$/)
        .use('file-loader')
        .loader(loadModule('file-loader'))
        .options({
        name: 'static/[name].[hash:8].[ext]',
        esModule: false,
        emitFile: !isServer
    });
    chain.plugin('minify-css').use(MiniCssExtractPlugin, [{
            filename: useHash ? 'static/css/[name].[contenthash:8].css' : 'static/css/[name].css',
            chunkFilename: useHash ? 'static/css/[name].[contenthash:8].chunk.css' : 'static/css/[name].chunk.css'
        }]);
    chain.plugin('webpackBar').use(new WebpackBar({
        name: isServer ? 'server' : 'client',
        color: isServer ? '#f173ac' : '#45b97c'
    }));
    chain.plugin('ssrDefine').use(webpack.DefinePlugin, [{
            __isBrowser__: !isServer
        }]);
    chainBaseConfig(chain);
    return config;
};
exports.getBaseConfig = getBaseConfig;
